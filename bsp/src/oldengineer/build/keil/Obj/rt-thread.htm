<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rt-thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rt-thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Jun 07 22:25:56 2024
<BR><P>
<H3>Maximum Stack Usage =        580 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CustomUI_Transmit_Thread &rArr; sendUIData &rArr; drv_UIdataSend &rArr; UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[23a]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b6]">rt_kprintf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[66]">ArmCtrl_1ms_Handler</a> from app_roboctrl.o(i.ArmCtrl_1ms_Handler) referenced from app_roboctrl.o(i.ArmCtrl_Thread_Init)
 <LI><a href="#[65]">ArmCtrl_Thread</a> from app_roboctrl.o(i.ArmCtrl_Thread) referenced from app_roboctrl.o(i.ArmCtrl_Thread_Init)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from drv_can.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from drv_can.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from drv_can.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from drv_can.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from drv_can.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from drv_can.o(i.CAN2_RX1_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from drv_can.o(i.CAN2_SCE_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from drv_can.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5e]">CEC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[77]">CatchOreEntry_Callback</a> from app_remotecallback_set.o(i.CatchOreEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[76]">CatchOreQuit_Callback</a> from app_remotecallback_set.o(i.CatchOreQuit_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[85]">ChassisFineTuning_Mode_Callback</a> from app_remotecallback_set.o(i.ChassisFineTuning_Mode_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[84]">ChassisNormal_Mode_Callback</a> from app_remotecallback_set.o(i.ChassisNormal_Mode_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[e3]">Chassis_AccLimit_Init</a> from func_chassismotor_ctrl.o(i.Chassis_AccLimit_Init) referenced from func_chassismotor_ctrl.o(.rti_fn.6)
 <LI><a href="#[90]">Clear_Screen</a> from fun_drawcustomui.o(i.Clear_Screen) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[a1]">CustomUI_Transmit_Thread</a> from app_ui.o(i.CustomUI_Transmit_Thread) referenced from app_ui.o(i.UI_Init)
 <LI><a href="#[a2]">CustomUI_Update_Thread</a> from app_ui.o(i.CustomUI_Update_Thread) referenced from app_ui.o(i.UI_Init)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[67]">DJI_Callback</a> from mod_refsystem.o(i.DJI_Callback) referenced from mod_refsystem.o(i.DJI_Init)
 <LI><a href="#[68]">DJI_Process_thread</a> from mod_refsystem.o(i.DJI_Process_thread) referenced from mod_refsystem.o(i.DJI_Init)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from drv_hw_spi.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from drv_usart.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from drv_usart.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from drv_hw_spi.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from drv_usart.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from drv_usart.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[9b]">Draw_aimingFrame_bkgd</a> from fun_drawcustomui.o(i.Draw_aimingFrame_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[9c]">Draw_aimingFrame_dyn</a> from fun_drawcustomui.o(i.Draw_aimingFrame_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[93]">Draw_armPitch_bkgd</a> from fun_drawcustomui.o(i.Draw_armPitch_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[94]">Draw_armPitch_dyn</a> from fun_drawcustomui.o(i.Draw_armPitch_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[91]">Draw_armYaw_bkgd</a> from fun_drawcustomui.o(i.Draw_armYaw_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[92]">Draw_armYaw_dyn</a> from fun_drawcustomui.o(i.Draw_armYaw_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[97]">Draw_forearmRoll_bkgd</a> from fun_drawcustomui.o(i.Draw_forearmRoll_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[98]">Draw_forearmRoll_dyn</a> from fun_drawcustomui.o(i.Draw_forearmRoll_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[99]">Draw_imageTrans_bkgd</a> from fun_drawcustomui.o(i.Draw_imageTrans_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[9a]">Draw_imageTrans_dyn</a> from fun_drawcustomui.o(i.Draw_imageTrans_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[9d]">Draw_laneLines_bkgd</a> from fun_drawcustomui.o(i.Draw_laneLines_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[9e]">Draw_laneLines_dyn</a> from fun_drawcustomui.o(i.Draw_laneLines_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[95]">Draw_pump_bkgd</a> from fun_drawcustomui.o(i.Draw_pump_bkgd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[96]">Draw_pump_dyn</a> from fun_drawcustomui.o(i.Draw_pump_dyn) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[db]">Engineer_Data_Init</a> from drv_robo_data.o(i.Engineer_Data_Init) referenced from drv_robo_data.o(.rti_fn.1)
 <LI><a href="#[79]">ExpandCtrl_Enter_Callback</a> from app_remotecallback_set.o(i.ExpandCtrl_Enter_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[78]">ExpandCtrl_Quit_Callback</a> from app_remotecallback_set.o(i.ExpandCtrl_Quit_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[61]">FMPI2C1_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[60]">FMPI2C1_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[7d]">FloorOreEntry_Callback</a> from app_remotecallback_set.o(i.FloorOreEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[7f]">FrontGoldOreEntry_Callback</a> from app_remotecallback_set.o(i.FrontGoldOreEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[dc]">GPIO_Init</a> from func_gpio_ctrl.o(i.GPIO_Init) referenced from func_gpio_ctrl.o(.rti_fn.1)
 <LI><a href="#[4]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[7b]">HotKey_Enter_Callback</a> from app_remotecallback_set.o(i.HotKey_Enter_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[7a]">HotKey_Quit_Callback</a> from app_remotecallback_set.o(i.HotKey_Quit_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[e9]">KeyMenu_EVT_Init</a> from func_key_record.o(i.KeyMenu_EVT_Init) referenced from func_key_record.o(.rti_fn.6)
 <LI><a href="#[e4]">KeyMouseData_Init</a> from app_remotecallback_set.o(i.KeyMouseData_Init) referenced from app_remotecallback_set.o(.rti_fn.6)
 <LI><a href="#[e0]">KeyRecData_PreInit</a> from func_key_record.o(i.KeyRecData_PreInit) referenced from func_key_record.o(.rti_fn.1)
 <LI><a href="#[86]">KeymouseData_entry</a> from app_keymousedata_ctrl.o(i.KeymouseData_entry) referenced from app_keymousedata_ctrl.o(i.KeymouseData_Thread_Init)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[88]">Monitor_Thread_Entry</a> from app_monitor.o(i.Monitor_Thread_Entry) referenced from app_monitor.o(i.Monitor_Init)
 <LI><a href="#[87]">Monitor_Timer_Timeout_Handler</a> from app_monitor.o(i.Monitor_Timer_Timeout_Handler) referenced from app_monitor.o(i.Monitor_Init)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5d]">QUADSPI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[e7]">RGB_init</a> from drv_rgblight.o(i.RGB_init) referenced from drv_rgblight.o(.rti_fn.6)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[8b]">Receive_Slave1_Handler</a> from mod_can_data.o(i.Receive_Slave1_Handler) referenced from mod_can_data.o(i.SPICAN_Init)
 <LI><a href="#[8c]">Receive_Slave2_Handler</a> from mod_can_data.o(i.Receive_Slave2_Handler) referenced from mod_can_data.o(i.SPICAN_Init)
 <LI><a href="#[7c]">ResetEntry_Callback</a> from app_remotecallback_set.o(i.ResetEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[81]">RoboArmAngleMode_Callback</a> from app_remotecallback_set.o(i.RoboArmAngleMode_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[83]">RoboArmCtrlMode_Callback</a> from app_remotecallback_set.o(i.RoboArmCtrlMode_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[82]">RoboArmPosMode_Callback</a> from app_remotecallback_set.o(i.RoboArmPosMode_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[e5]">RoboCtrl_Filter_Init</a> from mod_robostatectrl.o(i.RoboCtrl_Filter_Init) referenced from mod_robostatectrl.o(.rti_fn.6)
 <LI><a href="#[89]">RoboRCtrl_Thread</a> from app_roboremote_ctrl.o(i.RoboRCtrl_Thread) referenced from app_roboremote_ctrl.o(i.RoboremoteCtrl_Init)
 <LI><a href="#[8a]">RoboremoteCtrl_Handler</a> from app_roboremote_ctrl.o(i.RoboremoteCtrl_Handler) referenced from app_roboremote_ctrl.o(i.RoboremoteCtrl_Init)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5c]">SAI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5f]">SPDIF_RX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5a]">SPI4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[8d]">SPI_CAN_Thread</a> from drv_spican.o(i.SPI_CAN_Thread) referenced from drv_spican.o(i.SPI_CAN_Thread_Init)
 <LI><a href="#[6b]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[6b]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6b]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[69]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[69]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6e]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[6c]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6a]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[6a]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6f]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[6d]">SPI_DMATransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[80]">SideGoldOreEntry_Callback</a> from app_remotecallback_set.o(i.SideGoldOreEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[7e]">SilverOreEntry_Callback</a> from app_remotecallback_set.o(i.SilverOreEntry_Callback) referenced from app_remotecallback_set.o(i.KeyMouseData_Init)
 <LI><a href="#[8e]">Slave_Reset</a> from drv_spican.o(i.Slave_Reset) referenced from drv_spican.o(i.SPI_CAN_Thread_Init)
 <LI><a href="#[8f]">SoundDisplay_entry</a> from func_musicplayer.o(i.SoundDisplay_entry) referenced from func_musicplayer.o(i.SoundDisplay_start)
 <LI><a href="#[b]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[73]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[73]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[71]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[72]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[74]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[75]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[a0]">UI_drawEnd</a> from fun_drawcustomui.o(i.UI_drawEnd) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[9f]">UI_dynRefresh</a> from fun_drawcustomui.o(i.UI_dynRefresh) referenced from app_ui.o(i.UI_Func_List_Init)
 <LI><a href="#[31]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from drv_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from drv_usart.o(i.USART6_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[d5]">_can_config</a> from drv_can.o(i._can_config) referenced from drv_can.o(.constdata)
 <LI><a href="#[d6]">_can_control</a> from drv_can.o(i._can_control) referenced from drv_can.o(.constdata)
 <LI><a href="#[d8]">_can_recvmsg</a> from drv_can.o(i._can_recvmsg) referenced from drv_can.o(.constdata)
 <LI><a href="#[d7]">_can_sendmsg</a> from drv_can.o(i._can_sendmsg) referenced from drv_can.o(.constdata)
 <LI><a href="#[ad]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[ab]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[ac]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[b0]">_pwm_control</a> from rt_drv_pwm.o(i._pwm_control) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[ae]">_pwm_read</a> from rt_drv_pwm.o(i._pwm_read) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[af]">_pwm_write</a> from rt_drv_pwm.o(i._pwm_write) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[c4]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[c2]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[c3]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[e6]">buzzer_init</a> from drv_buzzer.o(i.buzzer_init) referenced from drv_buzzer.o(.rti_fn.6)
 <LI><a href="#[b7]">cantimeout</a> from can.o(i.cantimeout) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[a6]">cpu_usage_idle_hook</a> from drv_cpuusage.o(i.cpu_usage_idle_hook) referenced from drv_cpuusage.o(i.cpu_usage_init)
 <LI><a href="#[e8]">cpu_usage_init</a> from drv_cpuusage.o(i.cpu_usage_init) referenced from drv_cpuusage.o(.rti_fn.6)
 <LI><a href="#[1]">drv_pwm_control</a> from drv_pwm.o(i.drv_pwm_control) referenced 2 times from drv_pwm.o(.data)
 <LI><a href="#[62]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[aa]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[a7]">motor_readmsg</a> from drv_motor.o(i.motor_readmsg) referenced from drv_motor.o(i.motor_init)
 <LI><a href="#[b3]">rt_can_close</a> from can.o(i.rt_can_close) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[b6]">rt_can_control</a> from can.o(i.rt_can_control) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[b1]">rt_can_init</a> from can.o(i.rt_can_init) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[b2]">rt_can_open</a> from can.o(i.rt_can_open) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[b4]">rt_can_read</a> from can.o(i.rt_can_read) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[b5]">rt_can_write</a> from can.o(i.rt_can_write) referenced from can.o(i.rt_hw_can_register)
 <LI><a href="#[de]">rt_hw_can_init</a> from drv_can.o(i.rt_hw_can_init) referenced from drv_can.o(.rti_fn.1)
 <LI><a href="#[dd]">rt_hw_spi_init</a> from drv_spi.o(i.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[ba]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[bd]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b8]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b9]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[bb]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[bc]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[a4]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[c5]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[a5]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[c0]">rt_watchdog_close</a> from watchdog.o(i.rt_watchdog_close) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[c1]">rt_watchdog_control</a> from watchdog.o(i.rt_watchdog_control) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[be]">rt_watchdog_init</a> from watchdog.o(i.rt_watchdog_init) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[bf]">rt_watchdog_open</a> from watchdog.o(i.rt_watchdog_open) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[df]">rt_wdt_init</a> from drv_wdt.o(i.rt_wdt_init) referenced from drv_wdt.o(.rti_fn.1)
 <LI><a href="#[e1]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[da]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[ea]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[d9]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[a9]">serial_thread_entry</a> from drv_remote.o(i.serial_thread_entry) referenced from drv_remote.o(i.remote_uart_init)
 <LI><a href="#[d3]">spi_configure</a> from drv_spi.o(i.spi_configure) referenced from drv_spi.o(.constdata)
 <LI><a href="#[d4]">spixfer</a> from drv_spi.o(i.spixfer) referenced from drv_spi.o(.constdata)
 <LI><a href="#[ce]">stm32_configure</a> from drv_usart.o(i.stm32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[cf]">stm32_control</a> from drv_usart.o(i.stm32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[d2]">stm32_dma_transmit</a> from drv_usart.o(i.stm32_dma_transmit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[d1]">stm32_getc</a> from drv_usart.o(i.stm32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[cb]">stm32_pin_attach_irq</a> from drv_gpio.o(i.stm32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[cc]">stm32_pin_dettach_irq</a> from drv_gpio.o(i.stm32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[cd]">stm32_pin_irq_enable</a> from drv_gpio.o(i.stm32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c8]">stm32_pin_mode</a> from drv_gpio.o(i.stm32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[ca]">stm32_pin_read</a> from drv_gpio.o(i.stm32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c9]">stm32_pin_write</a> from drv_gpio.o(i.stm32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d0]">stm32_putc</a> from drv_usart.o(i.stm32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[e2]">stm32_pwm_init</a> from drv_pwm.o(i.stm32_pwm_init) referenced from drv_pwm.o(.rti_fn.3)
 <LI><a href="#[a3]">task_50ms_IRQHandler</a> from app_ui.o(i.task_50ms_IRQHandler) referenced from app_ui.o(i.UI_Init)
 <LI><a href="#[a8]">uart_input</a> from drv_remote.o(i.uart_input) referenced from drv_remote.o(i.remote_uart_init)
 <LI><a href="#[c7]">wdt_control</a> from drv_wdt.o(i.wdt_control) referenced from drv_wdt.o(i.rt_wdt_init)
 <LI><a href="#[c6]">wdt_init</a> from drv_wdt.o(i.wdt_init) referenced from drv_wdt.o(i.rt_wdt_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[39c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[eb]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[39e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[39f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[309]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FMPI2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FMPI2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[301]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[370]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[371]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[378]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[3a2]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_protocol
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_draw_text
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_rect_operate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUIexData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_bkgd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_bkgd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_bkgd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
</UL>

<P><STRONG><a name="[3a3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3a4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_data_init
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_draw_text
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sendmsg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_recvmsg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[3a6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Swdg_Info
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3a7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3a8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3a9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3ab]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[f6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3ac]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3ad]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>arm_abs_f32</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, arm_abs_f32.o(.text.arm_abs_f32))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Resolve
</UL>

<P><STRONG><a name="[2e0]"></a>arm_copy_f32</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, arm_copy_f32.o(.text.arm_copy_f32))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Transmit
</UL>

<P><STRONG><a name="[18d]"></a>arm_cos_f32</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, arm_cos_f32.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPitch_StaticM5
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch2_StaticM3
</UL>

<P><STRONG><a name="[2df]"></a>arm_dot_prod_f32</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, arm_dot_prod_f32.o(.text.arm_dot_prod_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_dot_prod_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_DAngle
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
</UL>

<P><STRONG><a name="[2dc]"></a>arm_sin_cos_f32</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, arm_sin_cos_f32.o(.text.arm_sin_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Rotate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToXY
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Rotate_z
</UL>

<P><STRONG><a name="[18c]"></a>arm_sin_f32</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, arm_sin_f32.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch1_StaticM2
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[103]"></a>Align</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, drv_motor_locked.o(i.Align))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Align
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetSpeed_ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalAlign
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmRollAlign
</UL>

<P><STRONG><a name="[105]"></a>ArmAngle2ArmPos</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, drv_arm_solve.o(i.ArmAngle2ArmPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ArmAngle2ArmPos &rArr; ArmAngle2ForearmVector1 &rArr; ForearmVector_temp1 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector1
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[106]"></a>ArmAngle2ForearmVector1</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, drv_arm_solve.o(i.ArmAngle2ForearmVector1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ArmAngle2ForearmVector1 &rArr; ForearmVector_temp1 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector_temp1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Rotate_z
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboPos_Latch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ArmPos
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
</UL>

<P><STRONG><a name="[10a]"></a>ArmAngle2ForearmVector2</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, drv_arm_solve.o(i.ArmAngle2ForearmVector2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ArmAngle2ForearmVector2 &rArr; ForearmVector_temp2 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector_temp2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Rotate_z
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboPos_Latch
</UL>

<P><STRONG><a name="[10c]"></a>ArmComp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_arm_solve.o(i.ArmComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArmComp &rArr; BoomPitch1_StaticM2
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPitch_StaticM5
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch2_StaticM3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch1_StaticM2
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[110]"></a>ArmComp_Slow</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, drv_arm_solve.o(i.ArmComp_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArmComp_Slow &rArr; BoomPitch1_StaticM2
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPitch_StaticM5
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_SlowStart
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch2_StaticM3
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPitch1_StaticM2
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[15a]"></a>ArmCtrl_Thread_Init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, app_roboctrl.o(i.ArmCtrl_Thread_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ArmCtrl_Thread_Init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Transmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlanSettings3D_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetAngle_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[12b]"></a>ArmEncoder2Angle</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, func_armmotor_ctrl.o(i.ArmEncoder2Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArmEncoder2Angle &rArr; BoomYaw_AngleModeChange
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_AngleModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[162]"></a>ArmImagePos2ImageAngle</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, drv_image_solve.o(i.ArmImagePos2ImageAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ArmImagePos2ImageAngle &rArr; Vector3D_ToPYM &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Subb
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[135]"></a>ArmMachinelimit_If</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, drv_arm_solve.o(i.ArmMachinelimit_If))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArmMachinelimit_If
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitIf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[117]"></a>ArmMotor_DataValid_If</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.ArmMotor_DataValid_If))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[167]"></a>ArmMotor_Init</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, func_armmotor_ctrl.o(i.ArmMotor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ArmMotor_Init &rArr; motor_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanSettings_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAlign_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11c]"></a>ArmMotor_NowAngle_Read</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_NowAngle_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_NowAngle_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[152]"></a>ArmMotor_NowPos_Write</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_NowPos_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_NowPos_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[11d]"></a>ArmMotor_NowSpeed_Read</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_NowSpeed_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_NowSpeed_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[16f]"></a>ArmMotor_RadFilter_Read</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_RadFilter_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_RadFilter_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UIData_fromServer
</UL>

<P><STRONG><a name="[156]"></a>ArmMotor_RadFilter_Write</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_RadFilter_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_RadFilter_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[154]"></a>ArmMotor_SetAngle_Write</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_SetAngle_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_SetAngle_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[11e]"></a>ArmMotor_SetPos_Read</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_SetPos_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_SetPos_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[153]"></a>ArmMotor_SetPos_Write</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmMotor_SetPos_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmMotor_SetPos_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[13c]"></a>ArmMotorinput_Calculate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, func_armmotor_ctrl.o(i.ArmMotorinput_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArmMotorinput_Calculate &rArr; SinWave_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[28c]"></a>ArmPosRemote_Struct_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mod_robostatectrl.o(i.ArmPosRemote_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[171]"></a>ArmPosSet_Read</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, func_dataserver.o(i.ArmPosSet_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ArmPosSet_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[172]"></a>ArmPosStateNowRead</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, func_dataserver.o(i.ArmPosStateNowRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ArmPosStateNowRead &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[173]"></a>ArmPosStateSet_ABS</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, func_dataserver.o(i.ArmPosStateSet_ABS))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorPullup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorLaydown
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorImageInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverPullup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldPullup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockPullup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockAim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldPullup
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_4levelOreL_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_3levelOre_Init
</UL>

<P><STRONG><a name="[174]"></a>ArmPosStateSet_ADD</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, func_dataserver.o(i.ArmPosStateSet_ADD))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ArmPosStateSet_ADD &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[175]"></a>ArmPosState_3levelOre_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_3levelOre_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_3levelOre_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
</UL>

<P><STRONG><a name="[177]"></a>ArmPosState_4levelOreL_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_4levelOreL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_4levelOreL_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
</UL>

<P><STRONG><a name="[178]"></a>ArmPosState_FrontGoldInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_FrontGoldInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_FrontGoldInit &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[179]"></a>ArmPosState_FrontGoldPullup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_FrontGoldPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_FrontGoldPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[17a]"></a>ArmPosState_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
</UL>

<P><STRONG><a name="[17b]"></a>ArmPosState_ObstacleblockAim</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_ObstacleblockAim))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_ObstacleblockAim &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[17c]"></a>ArmPosState_ObstacleblockPullup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_ObstacleblockPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_ObstacleblockPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[17d]"></a>ArmPosState_SideGoldInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_SideGoldInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_SideGoldInit &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[17e]"></a>ArmPosState_SideGoldPullup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_SideGoldPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_SideGoldPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideGoldOreEntry_Callback
</UL>

<P><STRONG><a name="[17f]"></a>ArmPosState_SilverInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_SilverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_SilverInit &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
</UL>

<P><STRONG><a name="[180]"></a>ArmPosState_SilverPullup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_SilverPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_SilverPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
</UL>

<P><STRONG><a name="[181]"></a>ArmPosState_floorImageInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_floorImageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_floorImageInit &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
</UL>

<P><STRONG><a name="[182]"></a>ArmPosState_floorInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_floorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_floorInit &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
</UL>

<P><STRONG><a name="[183]"></a>ArmPosState_floorLaydown</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_floorLaydown))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_floorLaydown &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
</UL>

<P><STRONG><a name="[184]"></a>ArmPosState_floorPullup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_robostatectrl.o(i.ArmPosState_floorPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ArmPosState_floorPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
</UL>

<P><STRONG><a name="[126]"></a>ArmRollAlign</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, func_armmotor_ctrl.o(i.ArmRollAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArmRollAlign &rArr; Align
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_IfLocked
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[186]"></a>Arm_IfLimit_Data_Read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.Arm_IfLimit_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Arm_IfLimit_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UIData_fromServer
</UL>

<P><STRONG><a name="[158]"></a>Arm_IfLimit_Data_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.Arm_IfLimit_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Arm_IfLimit_Data_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[12d]"></a>Arm_ZeroAdjustment</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.Arm_ZeroAdjustment))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[12c]"></a>Arm_angle2rad</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.Arm_angle2rad))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[138]"></a>Arm_angleLimit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, func_armmotor_ctrl.o(i.Arm_angleLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Arm_angleLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_truncate_number
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[130]"></a>BoomAngle2BoomPos</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, drv_arm_solve.o(i.BoomAngle2BoomPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BoomAngle2BoomPos &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[128]"></a>BoomEncoderSpeTorpm</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.BoomEncoderSpeTorpm))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[12e]"></a>BoomMotDataFilter</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.BoomMotDataFilter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[13a]"></a>BoomMotor_Ctrl</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, func_armmotor_ctrl.o(i.BoomMotor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoomMotor_Ctrl &rArr; Motor_SpeedPIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetAngle_ABS
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpeedPIDCalculate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetSpeed_ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[18b]"></a>BoomMotor_RadFilter_Read</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, func_dataserver.o(i.BoomMotor_RadFilter_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BoomMotor_RadFilter_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[134]"></a>BoomPos2BoomMotAngle</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, drv_arm_solve.o(i.BoomPos2BoomMotAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BoomPos2BoomMotAngle &rArr; BoomPos2BoomYawangle &rArr; Vector2D_ToRT &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Rotate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf_pro
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomYawangle
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[18e]"></a>BoomPos2BoomYawangle</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, drv_arm_solve.o(i.BoomPos2BoomYawangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BoomPos2BoomYawangle &rArr; Vector2D_ToRT &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Mod
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_ZeroIf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomMotAngle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawOutformBoom
</UL>

<P><STRONG><a name="[139]"></a>BoomSpe2BoomMotSpe</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, drv_arm_solve.o(i.BoomSpe2BoomMotSpe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BoomSpe2BoomMotSpe &rArr; Vector2D_Mod &rArr; utils_modulus_get &rArr; arm_dot_prod_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Rotate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Resolve
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Mod
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_ZeroIf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[12a]"></a>BoomSpeedrpmTorad</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.BoomSpeedrpmTorad))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[11a]"></a>BoomYawEncoder_DataValid_If</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.BoomYawEncoder_DataValid_If))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[196]"></a>BoomYaw_CoderCaliRad_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.BoomYaw_CoderCaliRad_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BoomYaw_CoderCaliRad_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[159]"></a>BoomYaw_CoderCaliRad_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.BoomYaw_CoderCaliRad_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BoomYaw_CoderCaliRad_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[124]"></a>BoomYaw_CoderRad_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.BoomYaw_CoderRad_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BoomYaw_CoderRad_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_can.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_can.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, drv_can.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, drv_can.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = CAN1_TX_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_can.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_can.o(i.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, drv_can.o(i.CAN2_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = CAN2_SCE_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, drv_can.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = CAN2_TX_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>CPU_DelayReset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cpu_reset.o(i.CPU_DelayReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CPU_DelayReset &rArr; CPU_Reset &rArr; ArmPosState_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[19d]"></a>CPU_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cpu_reset.o(i.CPU_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CPU_Reset &rArr; ArmPosState_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayReset
</UL>

<P><STRONG><a name="[1a0]"></a>Cal_frame</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mod_refsystem.o(i.Cal_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cal_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[118]"></a>ChassisMotor_DataValid_If</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, func_chassismotor_ctrl.o(i.ChassisMotor_DataValid_If))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ChassisMotor_DataValid_If &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[28d]"></a>ChassisSpeRemote_Struct_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mod_robostatectrl.o(i.ChassisSpeRemote_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1a5]"></a>ChassisSpeStateSet_ABS</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, func_dataserver.o(i.ChassisSpeStateSet_ABS))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ChassisSpeStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1a7]"></a>Chassis_AccLimit_Process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, func_chassismotor_ctrl.o(i.Chassis_AccLimit_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chassis_AccLimit_Process &rArr; Smooth_Acc_Process &rArr; Smooth_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[11f]"></a>Chassis_NowSpeed_Read</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, func_dataserver.o(i.Chassis_NowSpeed_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Chassis_NowSpeed_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[120]"></a>Chassis_SetSpeed_Read</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, func_dataserver.o(i.Chassis_SetSpeed_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Chassis_SetSpeed_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[90]"></a>Clear_Screen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fun_drawcustomui.o(i.Clear_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Clear_Screen &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_erase_graph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[293]"></a>CrossCircle_ProcessingSpecial</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, drv_encoder.o(i.CrossCircle_ProcessingSpecial))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1ac]"></a>CustCtrler_Data_Read</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, func_dataserver.o(i.CustCtrler_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = CustCtrler_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
</UL>

<P><STRONG><a name="[a1]"></a>CustomUI_Transmit_Thread</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_ui.o(i.CustomUI_Transmit_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = CustomUI_Transmit_Thread &rArr; sendUIData &rArr; drv_UIdataSend &rArr; UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UIData_fromServer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ref_Robot_ID
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendUIData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_waitForSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Init)
</UL>
<P><STRONG><a name="[a2]"></a>CustomUI_Update_Thread</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_ui.o(i.CustomUI_Update_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CustomUI_Update_Thread &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUIexData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Reset_Flag
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Travel_ui_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Init)
</UL>
<P><STRONG><a name="[1b7]"></a>DJI_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mod_refsystem.o(i.DJI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = DJI_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c0]"></a>DJI_protocol</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, mod_refsystem.o(i.DJI_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DJI_protocol &rArr; RecRefData &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
</UL>

<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_hw_spi.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_hw_spi.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>Draw_aimingFrame_bkgd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fun_drawcustomui.o(i.Draw_aimingFrame_bkgd))
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[9c]"></a>Draw_aimingFrame_dyn</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, fun_drawcustomui.o(i.Draw_aimingFrame_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Draw_aimingFrame_dyn &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_rect_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[93]"></a>Draw_armPitch_bkgd</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.Draw_armPitch_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Draw_armPitch_bkgd &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[94]"></a>Draw_armPitch_dyn</STRONG> (Thumb, 604 bytes, Stack size 112 bytes, fun_drawcustomui.o(i.Draw_armPitch_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Draw_armPitch_dyn &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationLine
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[91]"></a>Draw_armYaw_bkgd</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.Draw_armYaw_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Draw_armYaw_bkgd &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_rect_operate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[92]"></a>Draw_armYaw_dyn</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, fun_drawcustomui.o(i.Draw_armYaw_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Draw_armYaw_dyn &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationLine
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[97]"></a>Draw_forearmRoll_bkgd</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, fun_drawcustomui.o(i.Draw_forearmRoll_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Draw_forearmRoll_bkgd &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_draw_text
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[98]"></a>Draw_forearmRoll_dyn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.Draw_forearmRoll_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Draw_forearmRoll_dyn &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[99]"></a>Draw_imageTrans_bkgd</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, fun_drawcustomui.o(i.Draw_imageTrans_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Draw_imageTrans_bkgd &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_draw_text
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[9a]"></a>Draw_imageTrans_dyn</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.Draw_imageTrans_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Draw_imageTrans_dyn &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[9d]"></a>Draw_laneLines_bkgd</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, fun_drawcustomui.o(i.Draw_laneLines_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Draw_laneLines_bkgd &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationLine
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[9e]"></a>Draw_laneLines_dyn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fun_drawcustomui.o(i.Draw_laneLines_dyn))
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[95]"></a>Draw_pump_bkgd</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, fun_drawcustomui.o(i.Draw_pump_bkgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Draw_pump_bkgd &rArr; ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_draw_text
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[96]"></a>Draw_pump_dyn</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.Draw_pump_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Draw_pump_dyn &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>EncoderData_Init</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, drv_encoder.o(i.EncoderData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EncoderData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
</UL>

<P><STRONG><a name="[1cd]"></a>Encoder_Radnow_Read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_encoder.o(i.Encoder_Radnow_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderCan_Receive
</UL>

<P><STRONG><a name="[1cc]"></a>Encoder_readmsg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_encoder.o(i.Encoder_readmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder_readmsg &rArr; Encoder_angle_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_angle_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderCan_Receive
</UL>

<P><STRONG><a name="[1d2]"></a>EngineerRobo_Datanum_Find</STRONG> (Thumb, 1676 bytes, Stack size 8 bytes, func_dataserver.o(i.EngineerRobo_Datanum_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EngineerRobo_Datanum_Find &rArr; Package_Find_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Find_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[21a]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_halmain.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[193]"></a>Float_ZeroIf</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_vector.o(i.Float_ZeroIf))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpe2BoomMotSpe
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomYawangle
</UL>

<P><STRONG><a name="[131]"></a>Forearm2BoomPos</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, drv_arm_solve.o(i.Forearm2BoomPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Forearm2BoomPos &rArr; ForearmPos2ForearmVector &rArr; Vector3D_ToPYM &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Subb
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[127]"></a>ForearmEncoderSpeTorpm</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.ForearmEncoderSpeTorpm))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[12f]"></a>ForearmMotDataFilter</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.ForearmMotDataFilter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[13b]"></a>ForearmMotor_Ctrl</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, func_armmotor_ctrl.o(i.ForearmMotor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ForearmMotor_Ctrl &rArr; Motor_SpeedPIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetAngle_ABS
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpeedPIDCalculate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetSpeed_ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[1d7]"></a>ForearmPos2ForearmVector</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, drv_arm_solve.o(i.ForearmPos2ForearmVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ForearmPos2ForearmVector &rArr; Vector3D_ToPYM &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf_pro
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_ZeroIf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector2D_mod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forearm2BoomPos
</UL>

<P><STRONG><a name="[136]"></a>ForearmSetPlanning</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, func_armmotor_ctrl.o(i.ForearmSetPlanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ForearmSetPlanning &rArr; SetPlanning_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[129]"></a>ForearmSpeedrpmTorad</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.ForearmSpeedrpmTorad))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[1dc]"></a>ForearmVector2Arm_DeltaGet</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, mod_robostatectrl.o(i.ForearmVector2Arm_DeltaGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ForearmVector2Arm_DeltaGet &rArr; ForearmYawOutformBoom &rArr; BoomPos2BoomYawangle &rArr; Vector2D_ToRT &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawSet_ABS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_SetSize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawOutformBoom
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1df]"></a>ForearmYawSet_ABS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.ForearmYawSet_ABS))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ForearmYawSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2Arm_DeltaGet
</UL>

<P><STRONG><a name="[1e4]"></a>GetState_AirPumpIfOpen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, func_ui_data.o(i.GetState_AirPumpIfOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetState_AirPumpIfOpen &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[1ea]"></a>GetState_ArmIfLimit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, func_ui_data.o(i.GetState_ArmIfLimit))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[1eb]"></a>GetState_Armrad</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, func_ui_data.o(i.GetState_Armrad))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[1e5]"></a>GetState_OreState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, func_ui_data.o(i.GetState_OreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetState_OreState &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[1e6]"></a>GetState_RoboRCCtrl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, func_ui_data.o(i.GetState_RoboRCCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetState_RoboRCCtrl &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[1e7]"></a>GetState_UIReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, func_ui_data.o(i.GetState_UIReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GetState_UIReset &rArr; UIReset_State_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
</UL>

<P><STRONG><a name="[284]"></a>Get_ArmMotor</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, func_armmotor_ctrl.o(i.Get_ArmMotor))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave2_Handler
</UL>

<P><STRONG><a name="[2e1]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, drv_crc.o(i.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
</UL>

<P><STRONG><a name="[2e2]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, drv_crc.o(i.Get_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
</UL>

<P><STRONG><a name="[283]"></a>Get_ChassisMotor</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, func_chassismotor_ctrl.o(i.Get_ChassisMotor))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave1_Handler
</UL>

<P><STRONG><a name="[2af]"></a>Get_Filter</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mod_robostatectrl.o(i.Get_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>

<P><STRONG><a name="[286]"></a>Get_ImageEncoder</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.Get_ImageEncoder))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave2_Handler
</UL>

<P><STRONG><a name="[285]"></a>Get_ImageMotor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.Get_ImageMotor))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave2_Handler
</UL>

<P><STRONG><a name="[1af]"></a>Get_UIData_fromServer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, func_ui_data.o(i.Get_UIData_fromServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Get_UIData_fromServer &rArr; Arm_IfLimit_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Read
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
</UL>

<P><STRONG><a name="[1e9]"></a>Get_UI_Data</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, ui_interface.o(i.Get_UI_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Get_UI_Data &rArr; GetState_UIReset &rArr; UIReset_State_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_UIReset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_RoboRCCtrl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_OreState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_Armrad
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_ArmIfLimit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_AirPumpIfOpen
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUIexData
</UL>

<P><STRONG><a name="[1b2]"></a>Get_UI_Reset_Flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui_interface.o(i.Get_UI_Reset_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
</UL>

<P><STRONG><a name="[1ec]"></a>GyroYaw_AngleNow_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.GyroYaw_AngleNow_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GyroYaw_AngleNow_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1ed]"></a>GyroYaw_SpeedNow_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.GyroYaw_SpeedNow_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GyroYaw_SpeedNow_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[292]"></a>Gyro_angle2rad</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_gyroscope_data.o(i.Gyro_angle2rad))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[307]"></a>HAL_CAN_GetRxFifoFillLevel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxFifoFillLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_GetRxFifoFillLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>

<P><STRONG><a name="[306]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_recvmsg
</UL>

<P><STRONG><a name="[19a]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[23e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[205]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[395]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[207]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_GPIO_Init</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[396]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[38f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_common.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[209]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[39b]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[20a]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_common.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[20d]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[25e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[20e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[20b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[211]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[212]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[215]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[214]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[216]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[213]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[217]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1142 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[390]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[218]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[219]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[21b]"></a>HAL_SPI_Receive</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[21e]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[220]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[21c]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[21f]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_StartTransmit
</UL>

<P><STRONG><a name="[222]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[223]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_spican.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_SPI_TxRxCpltCallback &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[35e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[225]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[393]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[226]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[227]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[229]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[329]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_GenerateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[22e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[22f]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[234]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[235]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[236]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[238]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[239]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[23b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[241]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[242]"></a>HAL_UART_MspInit</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[244]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>

<P><STRONG><a name="[245]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[247]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxHalfCpltCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[248]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
</UL>

<P><STRONG><a name="[249]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2c8]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[13f]"></a>ImageEncoderSpeTorpm</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.ImageEncoderSpeTorpm))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[11b]"></a>ImageEncoder_DataValid_If</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.ImageEncoder_DataValid_If))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[13e]"></a>ImageGimbalAlign</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, func_imagemotor_ctrl.o(i.ImageGimbalAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImageGimbalAlign &rArr; Align
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_IfLocked
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[155]"></a>ImageGimbalPitchSet_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageGimbalPitchSet_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageGimbalPitchSet_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[146]"></a>ImageGimbalSet2MotorSet</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, drv_image_solve.o(i.ImageGimbalSet2MotorSet))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[24d]"></a>ImageGimbal_Angle_Read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageGimbal_Angle_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageGimbal_Angle_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[157]"></a>ImageGimbal_Angle_Write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageGimbal_Angle_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageGimbal_Angle_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[144]"></a>ImageMachinelimit_If</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_image_solve.o(i.ImageMachinelimit_If))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ImageMachinelimit_If
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitIf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[143]"></a>ImageMotDataFilter</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.ImageMotDataFilter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[145]"></a>ImageMotorNow2GimbalNow</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_image_solve.o(i.ImageMotorNow2GimbalNow))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[123]"></a>ImageMotor_AngleHope_Read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageMotor_AngleHope_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageMotor_AngleHope_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[24f]"></a>ImageMotor_AngleHope_Write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageMotor_AngleHope_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageMotor_AngleHope_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[148]"></a>ImageMotor_Ctrl</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, func_imagemotor_ctrl.o(i.ImageMotor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ImageMotor_Ctrl &rArr; Motor_SpeedPIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetAngle_ABS
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpeedPIDCalculate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetSpeed_ABS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[119]"></a>ImageMotor_DataValid_If</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.ImageMotor_DataValid_If))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[250]"></a>ImageMotor_Init</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, func_imagemotor_ctrl.o(i.ImageMotor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ImageMotor_Init &rArr; motor_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanSettings_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAlign_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[121]"></a>ImageMotor_NowAngle_Read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageMotor_NowAngle_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageMotor_NowAngle_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[122]"></a>ImageMotor_NowSpeed_Read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageMotor_NowSpeed_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageMotor_NowSpeed_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[251]"></a>ImageMotor_YawAngleHope_Write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageMotor_YawAngleHope_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageMotor_YawAngleHope_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[149]"></a>ImageMotorinput_Calculate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, func_imagemotor_ctrl.o(i.ImageMotorinput_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ImageMotorinput_Calculate &rArr; SinWave_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[253]"></a>ImagePos_Resolve</STRONG> (Thumb, 178 bytes, Stack size 120 bytes, drv_arm_solve.o(i.ImagePos_Resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ImagePos_Resolve &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[147]"></a>ImageSetPlanning</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, func_imagemotor_ctrl.o(i.ImageSetPlanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ImageSetPlanning &rArr; SetPlanning_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[140]"></a>ImageSpeedrpmTorad</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.ImageSpeedrpmTorad))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[125]"></a>ImageYaw_CoderAngle_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, func_dataserver.o(i.ImageYaw_CoderAngle_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ImageYaw_CoderAngle_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[142]"></a>Image_ZeroAdjustment</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.Image_ZeroAdjustment))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[141]"></a>Image_angle2rad</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, func_imagemotor_ctrl.o(i.Image_angle2rad))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[e9]"></a>KeyMenu_EVT_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, func_key_record.o(i.KeyMenu_EVT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = KeyMenu_EVT_Init &rArr; rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_key_record.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[e0]"></a>KeyRecData_PreInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, func_key_record.o(i.KeyRecData_PreInit))
<BR>[Address Reference Count : 1]<UL><LI> func_key_record.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1a1]"></a>Key_GetState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, func_key_record.o(i.Key_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EVTToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreEntry_Callback
</UL>

<P><STRONG><a name="[255]"></a>Key_SetCallBack</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, func_key_record.o(i.Key_SetCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_SetCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EVTToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseData_Init
</UL>

<P><STRONG><a name="[25a]"></a>Key_SetPressConfirm</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, func_key_record.o(i.Key_SetPressConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_SetPressConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_EVTToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_Thread_Init
</UL>

<P><STRONG><a name="[25b]"></a>KeymouseData_Thread_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_keymousedata_ctrl.o(i.KeymouseData_Thread_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = KeymouseData_Thread_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetPressConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[295]"></a>MecanOmni_Resolve</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_chassis_solve.o(i.MecanOmni_Resolve))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[261]"></a>Mlist_Insert</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, drv_monitor.o(i.Mlist_Insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Mlist_Insert &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
</UL>

<P><STRONG><a name="[264]"></a>Mlist_Remove</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_monitor.o(i.Mlist_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Mlist_Remove &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
</UL>

<P><STRONG><a name="[266]"></a>Monitor_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, app_monitor.o(i.Monitor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Monitor_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMonitorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[26a]"></a>MotPack_Only_Chass</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_chassis_solve.o(i.MotPack_Only_Chass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotPack_Only_Chass &rArr; MotModule_Clamp_Base
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotModule_Clamp_Base
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[16b]"></a>MotorAlign_Init</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, drv_motor_locked.o(i.MotorAlign_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MotorAlign_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
</UL>

<P><STRONG><a name="[26b]"></a>MotorCan_Datanum_Find</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, mod_can_data.o(i.MotorCan_Datanum_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorCan_Datanum_Find &rArr; Package_Find_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Find_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[189]"></a>Motor_AnglePIDCalculate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_motor.o(i.Motor_AnglePIDCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_AnglePIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calculate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Read_SetAngle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Get_DeltaAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Ctrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotor_Ctrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_Ctrl
</UL>

<P><STRONG><a name="[26e]"></a>Motor_Get_DeltaAngle</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Get_DeltaAngle))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_angle_adjust
</UL>

<P><STRONG><a name="[185]"></a>Motor_IfLocked</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, drv_motor_locked.o(i.Motor_IfLocked))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalAlign
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmRollAlign
</UL>

<P><STRONG><a name="[195]"></a>Motor_Read_NowAngle</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Read_NowAngle))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_AngleModeChange
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
</UL>

<P><STRONG><a name="[26d]"></a>Motor_Read_NowSpeed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Read_NowSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
</UL>

<P><STRONG><a name="[2e3]"></a>Motor_Read_OutSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Read_OutSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsMotPID_Cal
</UL>

<P><STRONG><a name="[26f]"></a>Motor_Read_SetAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Read_SetAngle))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
</UL>

<P><STRONG><a name="[18a]"></a>Motor_SpeedPIDCalculate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_motor.o(i.Motor_SpeedPIDCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_SpeedPIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsMotPID_Cal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Ctrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotor_Ctrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_Ctrl
</UL>

<P><STRONG><a name="[188]"></a>Motor_Write_SetAngle_ABS</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Write_SetAngle_ABS))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Ctrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotor_Ctrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_Ctrl
</UL>

<P><STRONG><a name="[104]"></a>Motor_Write_SetSpeed_ABS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor.o(i.Motor_Write_SetSpeed_ABS))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsMotPID_Cal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Ctrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotor_Ctrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_Ctrl
</UL>

<P><STRONG><a name="[1a3]"></a>Ore_Drawing</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mod_robostatectrl.o(i.Ore_Drawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ore_Drawing &rArr; Sucker_DelayClose &rArr; SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sucker_DelayClose
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuckerState_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[1a2]"></a>Ore_Grabbing</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mod_robostatectrl.o(i.Ore_Grabbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ore_Grabbing &rArr; SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuckerState_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[270]"></a>PID_Calculate</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, pid.o(i.PID_Calculate))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpeedPIDCalculate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_AnglePIDCalculate
</UL>

<P><STRONG><a name="[1d3]"></a>Package_Find_Num</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drv_dataserve.o(i.Package_Find_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Package_Find_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Datanum_Find
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineerRobo_Datanum_Find
</UL>

<P><STRONG><a name="[16d]"></a>Package_Pionter</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_dataserve.o(i.Package_Pionter))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Package_Pionter &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Read
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawSet_ABS
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustCtrler_Data_Read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Get
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_YawAngleHope_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Write
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_SpeedNow_Read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_AngleNow_Read
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisSpeStateSet_ABS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_RadFilter_Read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ADD
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateNowRead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosSet_Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageYaw_CoderAngle_Read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowSpeed_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowAngle_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Read
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalPitchSet_Write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_SetSpeed_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_NowSpeed_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderRad_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetAngle_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowSpeed_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowPos_Write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowAngle_Read
</UL>

<P><STRONG><a name="[16e]"></a>Package_Pionter_Write_End</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, drv_dataserve.o(i.Package_Pionter_Write_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_Low_Pass_Filter_Float
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Read
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawSet_ABS
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustCtrler_Data_Read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ABS
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Get
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_YawAngleHope_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Write
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_SpeedNow_Read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_AngleNow_Read
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisSpeStateSet_ABS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_RadFilter_Read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ADD
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateNowRead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosSet_Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageYaw_CoderAngle_Read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowSpeed_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowAngle_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Read
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalPitchSet_Write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_SetSpeed_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_NowSpeed_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderRad_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetAngle_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowSpeed_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowPos_Write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowAngle_Read
</UL>

<P><STRONG><a name="[1ce]"></a>Package_Write_All_Data</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, drv_dataserve.o(i.Package_Write_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Package_Write_All_Data &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_Low_Pass_Filter_Float
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderCan_Receive
</UL>

<P><STRONG><a name="[15b]"></a>PlanSettings3D_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, drv_setplanning3d.o(i.PlanSettings3D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlanSettings3D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[279]"></a>PowerPL_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, func_gpio_ctrl.o(i.PowerPL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PowerPL_Init &rArr; set_RGB &rArr; rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[27b]"></a>PromptEQ_Set</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, drv_musiclibrary.o(i.PromptEQ_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = PromptEQ_Set &rArr; Phonogram_C &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phonogram_C
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
</UL>

<P><STRONG><a name="[2bd]"></a>QueueCtrl_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_queue.o(i.QueueCtrl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_Init
</UL>

<P><STRONG><a name="[2c0]"></a>Queue_Delete_End</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_queue.o(i.Queue_Delete_End))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
</UL>

<P><STRONG><a name="[2bb]"></a>Queue_GetWriteNum</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_queue.o(i.Queue_GetWriteNum))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
</UL>

<P><STRONG><a name="[2bf]"></a>Queue_Get_ReadEnd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_queue.o(i.Queue_Get_ReadEnd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
</UL>

<P><STRONG><a name="[38d]"></a>RCReadKeyBoard_Data</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, drv_remote.o(i.RCReadKeyBoard_Data))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
</UL>

<P><STRONG><a name="[25c]"></a>RC_Key_Process</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, func_key_record.o(i.RC_Key_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = RC_Key_Process &rArr; Key_Check &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_entry
</UL>

<P><STRONG><a name="[e7]"></a>RGB_init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drv_rgblight.o(i.RGB_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RGB_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rgblight.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[8b]"></a>Receive_Slave1_Handler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mod_can_data.o(i.Receive_Slave1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Receive_Slave1_Handler &rArr; MotorCan_Receive &rArr; Package_Write_All_Data &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChassisMotor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_can_data.o(i.SPICAN_Init)
</UL>
<P><STRONG><a name="[8c]"></a>Receive_Slave2_Handler</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, mod_can_data.o(i.Receive_Slave2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Receive_Slave2_Handler &rArr; MotorCan_Receive &rArr; Package_Write_All_Data &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ImageMotor
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ImageEncoder
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ArmMotor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderCan_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_can_data.o(i.SPICAN_Init)
</UL>
<P><STRONG><a name="[281]"></a>Ref_Bulid_If_Hurt</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, fun_protocolref.o(i.Ref_Bulid_If_Hurt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ref_Bulid_If_Hurt
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ref_Team_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[1ae]"></a>Ref_Robot_ID</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, fun_protocolref.o(i.Ref_Robot_ID))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
</UL>

<P><STRONG><a name="[282]"></a>Ref_Robot_Set_Hurt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fun_protocolref.o(i.Ref_Robot_Set_Hurt))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[287]"></a>Ref_Team_Color</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, fun_protocolref.o(i.Ref_Team_Color))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ref_Bulid_If_Hurt
</UL>

<P><STRONG><a name="[38c]"></a>RemoteDataProcess</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, drv_remote.o(i.RemoteDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RemoteDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
</UL>

<P><STRONG><a name="[1d4]"></a>Request_Add_Package</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, drv_dataserve.o(i.Request_Add_Package))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Request_Add_Package &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Package_Num_Now
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Engineer_Data_Init
</UL>

<P><STRONG><a name="[28a]"></a>RoboCtrl_State_Judge</STRONG> (Thumb, 814 bytes, Stack size 8 bytes, mod_robostatectrl.o(i.RoboCtrl_State_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = RoboCtrl_State_Judge &rArr; CPU_DelayReset &rArr; CPU_Reset &rArr; ArmPosState_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayReset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Drawing
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[28b]"></a>RoboPos_Latch</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, mod_robostatectrl.o(i.RoboPos_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RoboPos_Latch &rArr; ArmAngle2ForearmVector1 &rArr; ForearmVector_temp1 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector1
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[24b]"></a>RoboState_Acceleration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mod_robostatectrl.o(i.RoboState_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RoboState_Acceleration &rArr; Robo_SpeedGain_Set &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotKey_Enter_Callback
</UL>

<P><STRONG><a name="[24c]"></a>RoboState_NormalGain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mod_robostatectrl.o(i.RoboState_NormalGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RoboState_NormalGain &rArr; Robo_SpeedGain_Set &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotKey_Quit_Callback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
</UL>

<P><STRONG><a name="[176]"></a>Robo_Control</STRONG> (Thumb, 630 bytes, Stack size 8 bytes, drv_remotectrl_data.o(i.Robo_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Robo_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_RoboRCCtrl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_OreState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_AirPumpIfOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideGoldOreEntry_Callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmPosMode_Callback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmCtrlMode_Callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmAngleMode_Callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotKey_Quit_Callback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HotKey_Enter_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCtrl_Quit_Callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCtrl_Enter_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisNormal_Mode_Callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFineTuning_Mode_Callback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreQuit_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreEntry_Callback
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Get
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_NormalGain
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_Acceleration
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Drawing
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorPullup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorLaydown
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorImageInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverPullup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldPullup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockPullup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockAim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldPullup
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_4levelOreL_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_3levelOre_Init
</UL>

<P><STRONG><a name="[291]"></a>Robo_GainSpeedCalculate</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, mod_robostatectrl.o(i.Robo_GainSpeedCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Robo_GainSpeedCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[28f]"></a>Robo_SpeedGain_Get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, func_dataserver.o(i.Robo_SpeedGain_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Robo_SpeedGain_Get &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[296]"></a>Robo_SpeedGain_Set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.Robo_SpeedGain_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Robo_SpeedGain_Set &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_NormalGain
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_Acceleration
</UL>

<P><STRONG><a name="[297]"></a>RoboremoteCtrl_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, app_roboremote_ctrl.o(i.RoboremoteCtrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = RoboremoteCtrl_Init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_NormalGain
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[298]"></a>SPICAN_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mod_can_data.o(i.SPICAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = SPICAN_Init &rArr; SPI_CAN_Init &rArr; SPI_CAN_Thread_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_HW_SPI_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Set_ReceiveFun
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICan_SendInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[29a]"></a>SPI_CAN_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spican.o(i.SPI_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SPI_CAN_Init &rArr; SPI_CAN_Thread_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Dev_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
</UL>

<P><STRONG><a name="[2a3]"></a>SPI_CAN_SendMsg</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, drv_spican.o(i.SPI_CAN_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_CAN_SendMsg &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Handle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Init
</UL>

<P><STRONG><a name="[29c]"></a>SPI_CAN_Set_ReceiveFun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_spican.o(i.SPI_CAN_Set_ReceiveFun))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
</UL>

<P><STRONG><a name="[150]"></a>Send_Slave1_Handle</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mod_can_data.o(i.Send_Slave1_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Send_Slave1_Handle &rArr; SPI_CAN_SendMsg &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[14a]"></a>Send_Slave1_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mod_can_data.o(i.Send_Slave1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Send_Slave1_Init &rArr; SPI_CAN_SendMsg &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
</UL>

<P><STRONG><a name="[151]"></a>Send_Slave2_Handle</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mod_can_data.o(i.Send_Slave2_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Send_Slave2_Handle &rArr; SPI_CAN_SendMsg &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[13d]"></a>Send_Slave2_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mod_can_data.o(i.Send_Slave2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Send_Slave2_Init &rArr; SPI_CAN_SendMsg &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
</UL>

<P><STRONG><a name="[16c]"></a>SetPlanSettings_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_setplanning.o(i.SetPlanSettings_Init))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
</UL>

<P><STRONG><a name="[137]"></a>SetPlanning3D_Cal</STRONG> (Thumb, 900 bytes, Stack size 8 bytes, drv_setplanning3d.o(i.SetPlanning3D_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetPlanning3D_Cal &rArr; Vector3D_DAngle &rArr; acosf_pro &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning_Cal
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_DAngle
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Mod
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_ZeroIf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Subb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_SetSize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[1db]"></a>SetPlanning_Cal</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, drv_setplanning.o(i.SetPlanning_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPlanning_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSetPlanning
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmSetPlanning
</UL>

<P><STRONG><a name="[278]"></a>SetPlanning_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, drv_setplanning.o(i.SetPlanning_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlanSettings3D_Init
</UL>

<P><STRONG><a name="[290]"></a>SmootFilterhData_Get</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mod_robostatectrl.o(i.SmootFilterhData_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SmootFilterhData_Get &rArr; Smooth_GetDataABS &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_GetDataABS
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[28e]"></a>SmootFilterhData_Set</STRONG> (Thumb, 1582 bytes, Stack size 48 bytes, mod_robostatectrl.o(i.SmootFilterhData_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SmootFilterhData_Set &rArr; Smooth_SetDataABS &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustCtrler_Data_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Filter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1a4]"></a>SmoothFilter_Restart</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, mod_robostatectrl.o(i.SmoothFilter_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmPosMode_Callback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmCtrlMode_Callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmAngleMode_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisNormal_Mode_Callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFineTuning_Mode_Callback
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[1a6]"></a>Smooth_Acc_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_accclamp.o(i.Smooth_Acc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Smooth_Acc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Modify_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_AccLimit_Init
</UL>

<P><STRONG><a name="[2b3]"></a>Smooth_Acc_Modify_Speed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_accclamp.o(i.Smooth_Acc_Modify_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Init
</UL>

<P><STRONG><a name="[1a8]"></a>Smooth_Acc_Process</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_accclamp.o(i.Smooth_Acc_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Smooth_Acc_Process &rArr; Smooth_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Process
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Output
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_AccLimit_Process
</UL>

<P><STRONG><a name="[2b0]"></a>Smooth_GetDataABS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_exactsmooth.o(i.Smooth_GetDataABS))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Smooth_GetDataABS &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_FreshOutData
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Get
</UL>

<P><STRONG><a name="[2b1]"></a>Smooth_SetDataABS</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, drv_exactsmooth.o(i.Smooth_SetDataABS))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Smooth_SetDataABS &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fresh_DeltaData
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLimFix
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
</UL>

<P><STRONG><a name="[2b2]"></a>Smooth_SetData_Restart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_exactsmooth.o(i.Smooth_SetData_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>

<P><STRONG><a name="[132]"></a>SoundDisplay_AddSound</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, func_musicplayer.o(i.SoundDisplay_AddSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoundDisplay_AddSound
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_GetWriteNum
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilverOreEntry_Callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SideGoldOreEntry_Callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmPosMode_Callback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmCtrlMode_Callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArmAngleMode_Callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontGoldOreEntry_Callback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorOreEntry_Callback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisNormal_Mode_Callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFineTuning_Mode_Callback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreQuit_Callback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatchOreEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_Init
</UL>

<P><STRONG><a name="[2bc]"></a>SoundDisplay_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, func_musicplayer.o(i.SoundDisplay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SoundDisplay_Init &rArr; SoundDisplay_start &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCtrl_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e3]"></a>SuckerState_Set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, func_gpio_ctrl.o(i.SuckerState_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sucker_DelayClose
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Drawing
</UL>

<P><STRONG><a name="[271]"></a>Sucker_DelayClose</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, func_gpio_ctrl.o(i.Sucker_DelayClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sucker_DelayClose &rArr; SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuckerState_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Drawing
</UL>

<P><STRONG><a name="[113]"></a>Swdg_Add_to_Monitor</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mod_monitor.o(i.Swdg_Add_to_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnamecpy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Swdg_Info
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_entry
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
</UL>

<P><STRONG><a name="[2c2]"></a>Swdg_Create</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, drv_monitor.o(i.Swdg_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>

<P><STRONG><a name="[116]"></a>Swdg_Feed</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, mod_monitor.o(i.Swdg_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Swdg_Feed &rArr; Mlist_Remove &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_entry
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Travel_ui_list
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
</UL>

<P><STRONG><a name="[114]"></a>Swdg_Start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mod_monitor.o(i.Swdg_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Swdg_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_entry
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2c5]"></a>SystemClock_Config</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, board.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[228]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[237]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[22a]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[231]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1e8]"></a>UIReset_State_Data_Read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, func_dataserver.o(i.UIReset_State_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UIReset_State_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState_UIReset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[289]"></a>UIReset_State_Data_Write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, func_dataserver.o(i.UIReset_State_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UIReset_State_Data_Write &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEntry_Callback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
</UL>

<P><STRONG><a name="[399]"></a>UI_Clear_Init_Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fun_drawcustomui.o(i.UI_Clear_Init_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[2c9]"></a>UI_FuncListAdd</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fun_ui_list.o(i.UI_FuncListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = UI_FuncListAdd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TCB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Func_List_Init
</UL>

<P><STRONG><a name="[2cd]"></a>UI_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_ui.o(i.UI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = UI_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiUsartInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_synInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2c6]"></a>UI_List_Delete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fun_ui_list.o(i.UI_List_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UI_List_Delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Travel_ui_list
</UL>

<P><STRONG><a name="[2d2]"></a>UI_List_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fun_ui_list.o(i.UI_List_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_List_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[398]"></a>UI_List_IsEmpty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fun_ui_list.o(i.UI_List_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[2d4]"></a>UI_Set_Init_Flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fun_drawcustomui.o(i.UI_Set_Init_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_dynRefresh
</UL>

<P><STRONG><a name="[2ca]"></a>UI_TCB_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fun_ui_list.o(i.UI_TCB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_FuncListAdd
</UL>

<P><STRONG><a name="[a0]"></a>UI_drawEnd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fun_drawcustomui.o(i.UI_drawEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = UI_drawEnd &rArr; ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[9f]"></a>UI_dynRefresh</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, fun_drawcustomui.o(i.UI_dynRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UI_dynRefresh
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Set_Init_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Func_List_Init)
</UL>
<P><STRONG><a name="[2d5]"></a>UI_list_Destroy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fun_ui_list.o(i.UI_list_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UI_list_Destroy &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[2d6]"></a>UI_sendEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ui_interface.o(i.UI_sendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_synInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_50ms_IRQHandler
</UL>

<P><STRONG><a name="[2cf]"></a>UI_synInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ui_interface.o(i.UI_synInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UI_synInit &rArr; rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[2d7]"></a>UI_waitEvent</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ui_interface.o(i.UI_waitEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_endSend
</UL>

<P><STRONG><a name="[1ad]"></a>UI_waitForSend</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ui_interface.o(i.UI_waitForSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = UI_waitForSend &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
</UL>

<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USART3_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USART6_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>UnitCverRemote2standard</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_chassis_solve.o(i.UnitCverRemote2standard))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
</UL>

<P><STRONG><a name="[1e1]"></a>Vector2D_Add</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_vector.o(i.Vector2D_Add))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2D_XY_temp
</UL>

<P><STRONG><a name="[192]"></a>Vector2D_Mod</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_vector.o(i.Vector2D_Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Vector2D_Mod &rArr; utils_modulus_get &rArr; arm_dot_prod_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpe2BoomMotSpe
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector2D_mod
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomYawangle
</UL>

<P><STRONG><a name="[194]"></a>Vector2D_Resolve</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, drv_vector.o(i.Vector2D_Resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector2D_Resolve
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_abs_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpe2BoomMotSpe
</UL>

<P><STRONG><a name="[18f]"></a>Vector2D_Rotate</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, drv_vector.o(i.Vector2D_Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector2D_Rotate &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpe2BoomMotSpe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomMotAngle
</UL>

<P><STRONG><a name="[190]"></a>Vector2D_ToRT</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, drv_vector.o(i.Vector2D_ToRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Vector2D_ToRT &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomMotAngle
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomYawangle
</UL>

<P><STRONG><a name="[1e0]"></a>Vector2D_ToXY</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_vector.o(i.Vector2D_ToXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector2D_ToXY &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2D_XY_temp
</UL>

<P><STRONG><a name="[107]"></a>Vector3D_Add</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_vector.o(i.Vector3D_Add))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagePos_Resolve
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2Arm_DeltaGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmImagePos2ImageAngle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomAngle2BoomPos
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ArmPos
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector_temp1
</UL>

<P><STRONG><a name="[2ae]"></a>Vector3D_DAngle</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, drv_vector.o(i.Vector3D_DAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Vector3D_DAngle &rArr; acosf_pro &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf_pro
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_dot_prod_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
</UL>

<P><STRONG><a name="[277]"></a>Vector3D_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_vector.o(i.Vector3D_Init))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlanSettings3D_Init
</UL>

<P><STRONG><a name="[2ad]"></a>Vector3D_Mod</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_vector.o(i.Vector3D_Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Vector3D_Mod &rArr; utils_modulus_get &rArr; arm_dot_prod_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
</UL>

<P><STRONG><a name="[109]"></a>Vector3D_Rotate_z</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, drv_vector.o(i.Vector3D_Rotate_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector3D_Rotate_z &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector1
</UL>

<P><STRONG><a name="[1dd]"></a>Vector3D_SetSize</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_vector.o(i.Vector3D_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Vector3D_SetSize &rArr; utils_modulus_get &rArr; arm_dot_prod_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2Arm_DeltaGet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
</UL>

<P><STRONG><a name="[164]"></a>Vector3D_Subb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_vector.o(i.Vector3D_Subb))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmImagePos2ImageAngle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forearm2BoomPos
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmYawOutformBoom
</UL>

<P><STRONG><a name="[165]"></a>Vector3D_ToPYM</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, drv_vector.o(i.Vector3D_ToPYM))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Vector3D_ToPYM &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_modulus_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmImagePos2ImageAngle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
</UL>

<P><STRONG><a name="[163]"></a>Vector3D_ToXYZ</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, drv_vector.o(i.Vector3D_ToXYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagePos_Resolve
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmImagePos2ImageAngle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomAngle2BoomPos
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector_temp2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector_temp1
</UL>

<P><STRONG><a name="[133]"></a>Vector3D_Transmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_vector.o(i.Vector3D_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector3D_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_copy_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[27f]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_crc.o(i.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[27e]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_crc.o(i.Verify_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[14c]"></a>Wheel_NowSpeed_Revise</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, func_chassismotor_ctrl.o(i.Wheel_NowSpeed_Revise))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[14f]"></a>WheelsMotPID_Cal</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, func_chassismotor_ctrl.o(i.WheelsMotPID_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WheelsMotPID_Cal &rArr; Motor_SpeedPIDCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpeedPIDCalculate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Write_SetSpeed_ABS
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Read_OutSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[14d]"></a>WheelsMot_SpeedFilter</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, func_chassismotor_ctrl.o(i.WheelsMot_SpeedFilter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[14e]"></a>WheelsUnitCverStandard2Rpm</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, func_chassismotor_ctrl.o(i.WheelsUnitCverStandard2Rpm))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[2e4]"></a>Wheels_Motors_Init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, func_chassismotor_ctrl.o(i.Wheels_Motors_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Wheels_Motors_Init &rArr; motor_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14b]"></a>Wheels_Speed_Limit</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, func_chassismotor_ctrl.o(i.Wheels_Speed_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wheels_Speed_Limit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_max_of_4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
</UL>

<P><STRONG><a name="[260]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_common.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[2f0]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2ec]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2e6]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf_pro
</UL>

<P><STRONG><a name="[2eb]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf_pro
</UL>

<P><STRONG><a name="[2ee]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[2de]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
</UL>

<P><STRONG><a name="[2f6]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationLine
</UL>

<P><STRONG><a name="[2f8]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationLine
</UL>

<P><STRONG><a name="[2f3]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2ef]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2f4]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2f1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2e8]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2ea]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2ed]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2f7]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[3af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2e9]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[191]"></a>acosf_pro</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_vector.o(i.acosf_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = acosf_pro &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomMotAngle
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_DAngle
</UL>

<P><STRONG><a name="[1d9]"></a>asinf_pro</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_vector.o(i.asinf_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = asinf_pro &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
</UL>

<P><STRONG><a name="[2f5]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e6]"></a>buzzer_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_buzzer.o(i.buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = buzzer_init &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_buzzer.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[e8]"></a>cpu_usage_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_cpuusage.o(i.cpu_usage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_usage_init &rArr; rt_thread_idle_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_cpuusage.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[1c6]"></a>custom_ui_append_cirle_operate</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, drv_drawui.o(i.custom_ui_append_cirle_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = custom_ui_append_cirle_operate &rArr; ui_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_data_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_dyn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_bkgd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_dyn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_bkgd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_dyn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_bkgd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_bkgd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_bkgd
</UL>

<P><STRONG><a name="[1c5]"></a>custom_ui_append_line_operate</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, drv_drawui.o(i.custom_ui_append_line_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = custom_ui_append_line_operate &rArr; ui_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_data_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_laneLines_bkgd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_dyn
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_dyn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_bkgd
</UL>

<P><STRONG><a name="[1c4]"></a>custom_ui_append_rect_operate</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, drv_drawui.o(i.custom_ui_append_rect_operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = custom_ui_append_rect_operate &rArr; ui_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_data_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_bkgd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_aimingFrame_dyn
</UL>

<P><STRONG><a name="[1c9]"></a>custom_ui_draw_text</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, drv_drawui.o(i.custom_ui_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = custom_ui_draw_text
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_bkgd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_bkgd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_bkgd
</UL>

<P><STRONG><a name="[1aa]"></a>custom_ui_erase_graph</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_drawui.o(i.custom_ui_erase_graph))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>

<P><STRONG><a name="[323]"></a>custom_ui_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_drawui.o(i.custom_ui_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = custom_ui_init &rArr; ui_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[299]"></a>drv_HW_SPI_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_hw_spi.o(i.drv_HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = drv_HW_SPI_Init &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
</UL>

<P><STRONG><a name="[324]"></a>drv_UIdataSend</STRONG> (Thumb, 208 bytes, Stack size 288 bytes, drv_uisend.o(i.drv_UIdataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = drv_UIdataSend &rArr; UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendUIData
</UL>

<P><STRONG><a name="[2f2]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[39a]"></a>getIsCanAddGraph</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_drawui.o(i.getIsCanAddGraph))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_startSend
</UL>

<P><STRONG><a name="[31c]"></a>getSwdgInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_monitor.o(i.getSwdgInfo))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMonitorInit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modMonitorInit
</UL>

<P><STRONG><a name="[101]"></a>getSwdgNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_monitor.o(i.getSwdgNum))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddErrSwdg
</UL>

<P><STRONG><a name="[1b1]"></a>getUIexData</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, fun_drawcustomui.o(i.getUIexData))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = getUIexData &rArr; Get_UI_Data &rArr; GetState_UIReset &rArr; UIReset_State_Data_Read &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_Data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
</UL>

<P><STRONG><a name="[32a]"></a>$Super$$main</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = $Super$$main &rArr; remote_uart_init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheels_Motors_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerPL_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Datanum_Find
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_Thread_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineerRobo_Datanum_Find
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[aa]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; remote_uart_init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[31d]"></a>modMonitorInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mod_monitor.o(i.modMonitorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modMonitorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSwdgInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMonitorInit
</UL>

<P><STRONG><a name="[168]"></a>motor_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, drv_motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = motor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheels_Motors_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
</UL>

<P><STRONG><a name="[a7]"></a>motor_readmsg</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drv_motor.o(i.motor_readmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = motor_readmsg &rArr; motor_angle_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_angle_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCan_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_motor.o(i.motor_init)
</UL>
<P><STRONG><a name="[16a]"></a>pid_init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, pid.o(i.pid_init))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheels_Motors_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_Init
</UL>

<P><STRONG><a name="[32b]"></a>remote_uart_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_remote.o(i.remote_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = remote_uart_init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[330]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[23a]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sendmsg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_recvmsg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>

<P><STRONG><a name="[337]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[335]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[304]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
</UL>

<P><STRONG><a name="[357]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[32c]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[33f]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[341]"></a>rt_data_queue_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[343]"></a>rt_data_queue_peak</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[344]"></a>rt_data_queue_pop</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[315]"></a>rt_data_queue_push</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[340]"></a>rt_device_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[31e]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
</UL>

<P><STRONG><a name="[1b8]"></a>rt_device_find</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiUsartInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>

<P><STRONG><a name="[1ba]"></a>rt_device_open</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
</UL>

<P><STRONG><a name="[34a]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[34c]"></a>rt_device_pwm_register</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.rt_device_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_device_pwm_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[1bf]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
</UL>

<P><STRONG><a name="[34b]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>

<P><STRONG><a name="[1bb]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
</UL>

<P><STRONG><a name="[325]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
</UL>

<P><STRONG><a name="[31f]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
</UL>

<P><STRONG><a name="[254]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(i.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_synInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenu_EVT_Init
</UL>

<P><STRONG><a name="[2d8]"></a>rt_event_recv</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_waitEvent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_waitForSend
</UL>

<P><STRONG><a name="[258]"></a>rt_event_send</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Key_Process
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Check
</UL>

<P><STRONG><a name="[320]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
</UL>

<P><STRONG><a name="[265]"></a>rt_free</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_list_Destroy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_Delete
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
</UL>

<P><STRONG><a name="[352]"></a>rt_hw_board_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[de]"></a>rt_hw_can_init</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, drv_can.o(i.rt_hw_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_hw_can_init &rArr; rt_hw_can_register &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[19b]"></a>rt_hw_can_isr</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, can.o(i.rt_hw_can_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>

<P><STRONG><a name="[358]"></a>rt_hw_can_register</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, can.o(i.rt_hw_can_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_can_register &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
</UL>

<P><STRONG><a name="[365]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[19f]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
</UL>

<P><STRONG><a name="[ed]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[355]"></a>rt_hw_pin_init</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[24a]"></a>rt_hw_serial_isr</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[35a]"></a>rt_hw_serial_register</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[dd]"></a>rt_hw_spi_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_spi_init &rArr; rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_dma_info
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[30c]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[353]"></a>rt_hw_systick_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_systick_init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[356]"></a>rt_hw_usart_init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[360]"></a>rt_hw_watchdog_register</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, watchdog.o(i.rt_hw_watchdog_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wdt_init
</UL>

<P><STRONG><a name="[197]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[33d]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[199]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Callback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wdt_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_input
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMenu_EVT_Init
</UL>

<P><STRONG><a name="[263]"></a>rt_malloc</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_FuncListAdd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>

<P><STRONG><a name="[274]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
</UL>

<P><STRONG><a name="[1bd]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMonitorInit
</UL>

<P><STRONG><a name="[1b9]"></a>rt_mq_init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ipc.o(i.rt_mq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_mq_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
</UL>

<P><STRONG><a name="[1be]"></a>rt_mq_recv</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Process_thread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
</UL>

<P><STRONG><a name="[1b5]"></a>rt_mq_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Callback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_input
</UL>

<P><STRONG><a name="[366]"></a>rt_mq_send_wait</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, ipc.o(i.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mq_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[359]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[332]"></a>rt_mutex_release</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
</UL>

<P><STRONG><a name="[331]"></a>rt_mutex_take</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
</UL>

<P><STRONG><a name="[368]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[36a]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[36c]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[348]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[347]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[34d]"></a>rt_object_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[36d]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[1e2]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Reset
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Dev_Init
</UL>

<P><STRONG><a name="[29f]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuckerState_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Dev_Init
</UL>

<P><STRONG><a name="[27d]"></a>rt_pwm_enable</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.rt_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>

<P><STRONG><a name="[27c]"></a>rt_pwm_set</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rt_drv_pwm.o(i.rt_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RGB
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>

<P><STRONG><a name="[33a]"></a>rt_schedule</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[36e]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[36f]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[262]"></a>rt_sem_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>

<P><STRONG><a name="[15c]"></a>rt_sem_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Dev_Init
</UL>

<P><STRONG><a name="[112]"></a>rt_sem_release</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_1ms_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_GetDataABS
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_StartTransmit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_ReceiveProcess
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_EndTransmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Timer_Timeout_Handler
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>

<P><STRONG><a name="[115]"></a>rt_sem_take</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_SendMsg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_entry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboRCtrl_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_GetDataABS
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_StartTransmit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_EndTransmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>

<P><STRONG><a name="[224]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_GetDataABS
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_StartTransmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Remove
</UL>

<P><STRONG><a name="[311]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[372]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[373]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[35c]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>

<P><STRONG><a name="[31b]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[336]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[389]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[349]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[32f]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
</UL>

<P><STRONG><a name="[354]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[375]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[377]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[379]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[38b]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[367]"></a>rt_thread_control</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[1bc]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_start
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_Thread_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread_Init
</UL>

<P><STRONG><a name="[29d]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_entry
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
</UL>

<P><STRONG><a name="[37a]"></a>rt_thread_delete</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[a4]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[37e]"></a>rt_thread_idle_excute</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[380]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[321]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_idle_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_init
</UL>

<P><STRONG><a name="[15d]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[19e]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phonogram_C
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisMotor_DataValid_If
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Reset
</UL>

<P><STRONG><a name="[339]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[33b]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[37b]"></a>rt_thread_sleep</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[15e]"></a>rt_thread_startup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_start
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_uart_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeymouseData_Thread_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread_Init
</UL>

<P><STRONG><a name="[33c]"></a>rt_thread_suspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[a5]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[383]"></a>rt_thread_yield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[381]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[102]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning_Cal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_readmsg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_readmsg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordRefID
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinWave_Get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sucker_DelayClose
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Process
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayReset
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetData_Restart
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Travel_ui_list
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slave_Reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_thread_entry
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_FreshOutData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddErrSwdg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Create
</UL>

<P><STRONG><a name="[2c4]"></a>rt_tick_increase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[384]"></a>rt_timer_check</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[33e]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[15f]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
</UL>

<P><STRONG><a name="[37c]"></a>rt_timer_detach</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[2d0]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
</UL>

<P><STRONG><a name="[160]"></a>rt_timer_start</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboremoteCtrl_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmCtrl_Thread_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[333]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
</UL>

<P><STRONG><a name="[364]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[374]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[df]"></a>rt_wdt_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_wdt.o(i.rt_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_wdt_init &rArr; rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[ff]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>sendUIData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_drawui.o(i.sendUIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sendUIData &rArr; drv_UIdataSend &rArr; UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_UIdataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Transmit_Thread
</UL>

<P><STRONG><a name="[27a]"></a>set_RGB</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, drv_rgblight.o(i.set_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_RGB &rArr; rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerPL_Init
</UL>

<P><STRONG><a name="[276]"></a>set_buzzer</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, drv_buzzer.o(i.set_buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_buzzer &rArr; rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phonogram_C
</UL>

<P><STRONG><a name="[2e7]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2ce]"></a>uiUsartInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_uisend.o(i.uiUsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uiUsartInit &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[1ab]"></a>ui_endSend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fun_drawcustomui.o(i.ui_endSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ui_endSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_waitEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_drawEnd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_dyn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_bkgd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_laneLines_bkgd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_dyn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_bkgd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_dyn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_bkgd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_dyn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_bkgd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_dyn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_bkgd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_aimingFrame_dyn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>

<P><STRONG><a name="[1a9]"></a>ui_startSend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fun_drawcustomui.o(i.ui_startSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ui_startSend &rArr; UI_waitEvent &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_waitEvent
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIsCanAddGraph
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_pump_bkgd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_imageTrans_bkgd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_forearmRoll_bkgd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_bkgd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_bkgd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_aimingFrame_dyn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>

<P><STRONG><a name="[269]"></a>utils_clamp</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drv_utils.o(i.utils_clamp))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotModule_Clamp_Base
</UL>

<P><STRONG><a name="[2e5]"></a>utils_max_of_4</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, drv_utils.o(i.utils_max_of_4))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheels_Speed_Limit
</UL>

<P><STRONG><a name="[2da]"></a>utils_modulus_get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_utils.o(i.utils_modulus_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = utils_modulus_get &rArr; arm_dot_prod_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_dot_prod_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_DAngle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToPYM
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Mod
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToRT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Mod
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_SetSize
</UL>

<P><STRONG><a name="[187]"></a>utils_truncate_number</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_utils.o(i.utils_truncate_number))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_angleLimit
</UL>

<P><STRONG><a name="[2d1]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list_d.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_list_Destroy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_Delete
</UL>

<P><STRONG><a name="[2d3]"></a>vListInitialise</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list_d.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_Init
</UL>

<P><STRONG><a name="[2cb]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list_d.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_FuncListAdd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e1]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[da]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[ea]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[d9]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[37f]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[c5]"></a>rt_thread_idle_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[361]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>

<P><STRONG><a name="[350]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[34f]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[363]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[362]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[351]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>

<P><STRONG><a name="[38a]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[388]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[32e]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[369]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[36b]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[308]"></a>_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[30a]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[376]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[30b]"></a>_rt_thread_init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[37d]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[382]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[30d]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[385]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[30e]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[387]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[386]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[66]"></a>ArmCtrl_1ms_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_roboctrl.o(i.ArmCtrl_1ms_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ArmCtrl_1ms_Handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_roboctrl.o(i.ArmCtrl_Thread_Init)
</UL>
<P><STRONG><a name="[65]"></a>ArmCtrl_Thread</STRONG> (Thumb, 1494 bytes, Stack size 40 bytes, app_roboctrl.o(i.ArmCtrl_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ArmCtrl_Thread &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheels_Speed_Limit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsUnitCverStandard2Rpm
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsMot_SpeedFilter
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WheelsMotPID_Cal
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_NowSpeed_Revise
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPlanning3D_Cal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Handle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_angle2rad
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_ZeroAdjustment
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageYaw_CoderAngle_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSpeedrpmTorad
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageSetPlanning
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotorinput_Calculate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowSpeed_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_NowAngle_Read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_DataValid_If
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_Ctrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotorNow2GimbalNow
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotDataFilter
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMachinelimit_If
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalSet2MotorSet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalPitchSet_Write
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbalAlign
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageEncoder_DataValid_If
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageEncoderSpeTorpm
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmSpeedrpmTorad
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmSetPlanning
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotor_Ctrl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmMotDataFilter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmEncoderSpeTorpm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forearm2BoomPos
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_SetSpeed_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_NowSpeed_Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisMotor_DataValid_If
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderRad_Read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYawEncoder_DataValid_If
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpeedrpmTorad
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomSpe2BoomMotSpe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomMotAngle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_Ctrl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotDataFilter
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomEncoderSpeTorpm
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomAngle2BoomPos
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_angleLimit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_angle2rad
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_ZeroAdjustment
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_IfLimit_Data_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmRollAlign
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotorinput_Calculate
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetPos_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_SetAngle_Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_RadFilter_Write
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowSpeed_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowPos_Write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_NowAngle_Read
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotor_DataValid_If
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMachinelimit_If
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmEncoder2Angle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp_Slow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ArmPos
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_roboctrl.o(i.ArmCtrl_Thread_Init)
</UL>
<P><STRONG><a name="[89]"></a>RoboRCtrl_Thread</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, app_roboremote_ctrl.o(i.RoboRCtrl_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = RoboRCtrl_Thread &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Rotate
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitCverRemote2standard
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Set
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmootFilterhData_Get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_SpeedGain_Get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_GainSpeedCalculate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboPos_Latch
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCtrl_State_Judge
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotPack_Only_Chass
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MecanOmni_Resolve
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagePos_Resolve
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_YawAngleHope_Write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotor_AngleHope_Write
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGimbal_Angle_Read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_angle2rad
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_SpeedNow_Read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroYaw_AngleNow_Read
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2Arm_DeltaGet
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossCircle_ProcessingSpecial
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_AccLimit_Process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisSpeStateSet_ABS
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisSpeRemote_Struct_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomYaw_CoderCaliRad_Read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomMotor_RadFilter_Read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateSet_ADD
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosStateNowRead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosSet_Read
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosRemote_Struct_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmImagePos2ImageAngle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_roboremote_ctrl.o(i.RoboremoteCtrl_Init)
</UL>
<P><STRONG><a name="[8a]"></a>RoboremoteCtrl_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_roboremote_ctrl.o(i.RoboremoteCtrl_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RoboremoteCtrl_Handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_roboremote_ctrl.o(i.RoboremoteCtrl_Init)
</UL>
<P><STRONG><a name="[db]"></a>Engineer_Data_Init</STRONG> (Thumb, 1866 bytes, Stack size 8 bytes, drv_robo_data.o(i.Engineer_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Engineer_Data_Init &rArr; Request_Add_Package &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_robo_data.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1cb]"></a>EncoderCan_Receive</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mod_can_data.o(i.EncoderCan_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = EncoderCan_Receive &rArr; Package_Write_All_Data &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_readmsg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Radnow_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave2_Handler
</UL>

<P><STRONG><a name="[26c]"></a>MotorCan_Receive</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mod_can_data.o(i.MotorCan_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MotorCan_Receive &rArr; Package_Write_All_Data &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_readmsg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Read_NowSpeed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Read_NowAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave2_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Slave1_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>MotorCan_Write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mod_can_data.o(i.MotorCan_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorCan_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Handle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Handle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Slave1_Init
</UL>

<P><STRONG><a name="[29b]"></a>SPICan_SendInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mod_can_data.o(i.SPICan_SendInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPICan_SendInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICAN_Init
</UL>

<P><STRONG><a name="[1d1]"></a>Encoder_Get_DeltaAngle</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, drv_encoder.o(i.Encoder_Get_DeltaAngle))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_angle_adjust
</UL>

<P><STRONG><a name="[1cf]"></a>Encoder_angle_adjust</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, drv_encoder.o(i.Encoder_angle_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encoder_angle_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_angleorigin2rad
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_DeltaAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_readmsg
</UL>

<P><STRONG><a name="[1d0]"></a>Encoder_angleorigin2rad</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_encoder.o(i.Encoder_angleorigin2rad))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_angle_adjust
</UL>

<P><STRONG><a name="[161]"></a>BoomYaw_AngleModeChange</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, func_armmotor_ctrl.o(i.BoomYaw_AngleModeChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BoomYaw_AngleModeChange
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Read_NowAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmEncoder2Angle
</UL>

<P><STRONG><a name="[170]"></a>SinWave_Get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, func_armmotor_ctrl.o(i.SinWave_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SinWave_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMotorinput_Calculate
</UL>

<P><STRONG><a name="[e3]"></a>Chassis_AccLimit_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, func_chassismotor_ctrl.o(i.Chassis_AccLimit_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chassis_AccLimit_Init &rArr; Smooth_Acc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_chassismotor_ctrl.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[dc]"></a>GPIO_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, func_gpio_ctrl.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Init &rArr; SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuckerState_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_gpio_ctrl.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[252]"></a>SinWave_Get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, func_imagemotor_ctrl.o(i.SinWave_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SinWave_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMotorinput_Calculate
</UL>

<P><STRONG><a name="[275]"></a>Phonogram_C</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, drv_musiclibrary.o(i.Phonogram_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Phonogram_C &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromptEQ_Set
</UL>

<P><STRONG><a name="[8f]"></a>SoundDisplay_entry</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, func_musicplayer.o(i.SoundDisplay_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SoundDisplay_entry &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Get_ReadEnd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Delete_End
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromptEQ_Set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> func_musicplayer.o(i.SoundDisplay_start)
</UL>
<P><STRONG><a name="[2be]"></a>SoundDisplay_start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, func_musicplayer.o(i.SoundDisplay_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SoundDisplay_start &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_Init
</UL>

<P><STRONG><a name="[67]"></a>DJI_Callback</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mod_refsystem.o(i.DJI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = DJI_Callback &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_refsystem.o(i.DJI_Init)
</UL>
<P><STRONG><a name="[68]"></a>DJI_Process_thread</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mod_refsystem.o(i.DJI_Process_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = DJI_Process_thread &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_protocol
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mod_refsystem.o(i.DJI_Init)
</UL>
<P><STRONG><a name="[1c2]"></a>RecRefData</STRONG> (Thumb, 804 bytes, Stack size 16 bytes, mod_refsystem.o(i.RecRefData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RecRefData &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_frame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordRefID
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ref_Robot_Set_Hurt
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ref_Bulid_If_Hurt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_protocol
</UL>

<P><STRONG><a name="[280]"></a>recordRefID</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mod_refsystem.o(i.recordRefID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recordRefID
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecRefData
</UL>

<P><STRONG><a name="[86]"></a>KeymouseData_entry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_keymousedata_ctrl.o(i.KeymouseData_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = KeymouseData_entry &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Key_Process
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_keymousedata_ctrl.o(i.KeymouseData_Thread_Init)
</UL>
<P><STRONG><a name="[77]"></a>CatchOreEntry_Callback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.CatchOreEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CatchOreEntry_Callback &rArr; Ore_Drawing &rArr; Sucker_DelayClose &rArr; SuckerState_Set &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Drawing
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[76]"></a>CatchOreQuit_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.CatchOreQuit_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CatchOreQuit_Callback &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[85]"></a>ChassisFineTuning_Mode_Callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.ChassisFineTuning_Mode_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ChassisFineTuning_Mode_Callback &rArr; SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[84]"></a>ChassisNormal_Mode_Callback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.ChassisNormal_Mode_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ChassisNormal_Mode_Callback &rArr; SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[79]"></a>ExpandCtrl_Enter_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.ExpandCtrl_Enter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExpandCtrl_Enter_Callback &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[78]"></a>ExpandCtrl_Quit_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.ExpandCtrl_Quit_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExpandCtrl_Quit_Callback &rArr; Robo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[7d]"></a>FloorOreEntry_Callback</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.FloorOreEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = FloorOreEntry_Callback &rArr; ArmPosState_floorPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorPullup
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorLaydown
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorImageInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_3levelOre_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[7f]"></a>FrontGoldOreEntry_Callback</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.FrontGoldOreEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = FrontGoldOreEntry_Callback &rArr; ArmPosState_ObstacleblockPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockPullup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_ObstacleblockAim
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldPullup
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[7b]"></a>HotKey_Enter_Callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.HotKey_Enter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = HotKey_Enter_Callback &rArr; RoboState_Acceleration &rArr; Robo_SpeedGain_Set &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[7a]"></a>HotKey_Quit_Callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.HotKey_Quit_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = HotKey_Quit_Callback &rArr; RoboState_NormalGain &rArr; Robo_SpeedGain_Set &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboState_NormalGain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[e4]"></a>KeyMouseData_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.KeyMouseData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyMouseData_Init &rArr; Key_SetCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[7c]"></a>ResetEntry_Callback</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.ResetEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ResetEntry_Callback &rArr; ArmPosState_Init &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIReset_State_Data_Read
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorPullup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_floorImageInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_FrontGoldInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[81]"></a>RoboArmAngleMode_Callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.RoboArmAngleMode_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = RoboArmAngleMode_Callback &rArr; SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[83]"></a>RoboArmCtrlMode_Callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.RoboArmCtrlMode_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = RoboArmCtrlMode_Callback &rArr; SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[82]"></a>RoboArmPosMode_Callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.RoboArmPosMode_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = RoboArmPosMode_Callback &rArr; SmoothFilter_Restart &rArr; Smooth_SetData_Restart &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[80]"></a>SideGoldOreEntry_Callback</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.SideGoldOreEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SideGoldOreEntry_Callback &rArr; ArmPosState_SideGoldPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldPullup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SideGoldInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[7e]"></a>SilverOreEntry_Callback</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, app_remotecallback_set.o(i.SilverOreEntry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SilverOreEntry_Callback &rArr; ArmPosState_SilverPullup &rArr; ArmPosStateSet_ABS &rArr; Package_Pionter_Write_End &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robo_Control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundDisplay_AddSound
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmoothFilter_Restart
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ore_Grabbing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverPullup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_SilverInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmPosState_4levelOreL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_remotecallback_set.o(i.KeyMouseData_Init)
</UL>
<P><STRONG><a name="[1de]"></a>ForearmYawOutformBoom</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, mod_robostatectrl.o(i.ForearmYawOutformBoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ForearmYawOutformBoom &rArr; BoomPos2BoomYawangle &rArr; Vector2D_ToRT &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Subb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoomPos2BoomYawangle
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2Arm_DeltaGet
</UL>

<P><STRONG><a name="[e5]"></a>RoboCtrl_Filter_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mod_robostatectrl.o(i.RoboCtrl_Filter_Init))
<BR>[Address Reference Count : 1]<UL><LI> mod_robostatectrl.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[10d]"></a>BoomPitch1_StaticM2</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drv_arm_solve.o(i.BoomPitch1_StaticM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BoomPitch1_StaticM2
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp_Slow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp
</UL>

<P><STRONG><a name="[10e]"></a>BoomPitch2_StaticM3</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_arm_solve.o(i.BoomPitch2_StaticM3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BoomPitch2_StaticM3
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp_Slow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp
</UL>

<P><STRONG><a name="[111]"></a>Comp_SlowStart</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, drv_arm_solve.o(i.Comp_SlowStart))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp_Slow
</UL>

<P><STRONG><a name="[10f]"></a>ForearmPitch_StaticM5</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_arm_solve.o(i.ForearmPitch_StaticM5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ForearmPitch_StaticM5
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp_Slow
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmComp
</UL>

<P><STRONG><a name="[1d8]"></a>ForearmPos2ForearmVector2D_mod</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_arm_solve.o(i.ForearmPos2ForearmVector2D_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ForearmPos2ForearmVector2D_mod &rArr; ForearmVector2D_XY_temp &rArr; Vector2D_ToXY &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Mod
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmVector2D_XY_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector
</UL>

<P><STRONG><a name="[1da]"></a>ForearmVector2D_XY_temp</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, drv_arm_solve.o(i.ForearmVector2D_XY_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ForearmVector2D_XY_temp &rArr; Vector2D_ToXY &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_ToXY
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector2D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForearmPos2ForearmVector2D_mod
</UL>

<P><STRONG><a name="[108]"></a>ForearmVector_temp1</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, drv_arm_solve.o(i.ForearmVector_temp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ForearmVector_temp1 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector1
</UL>

<P><STRONG><a name="[10b]"></a>ForearmVector_temp2</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_arm_solve.o(i.ForearmVector_temp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ForearmVector_temp2 &rArr; Vector3D_ToXYZ &rArr; arm_sin_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3D_ToXYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmAngle2ForearmVector2
</UL>

<P><STRONG><a name="[166]"></a>LimitIf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_arm_solve.o(i.LimitIf))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmMachinelimit_If
</UL>

<P><STRONG><a name="[268]"></a>MotModule_Clamp_Base</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, drv_chassis_solve.o(i.MotModule_Clamp_Base))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotModule_Clamp_Base
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotPack_Only_Chass
</UL>

<P><STRONG><a name="[24e]"></a>LimitIf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_image_solve.o(i.LimitIf))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageMachinelimit_If
</UL>

<P><STRONG><a name="[1b4]"></a>Travel_ui_list</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, app_ui.o(i.Travel_ui_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Travel_ui_list &rArr; Swdg_Feed &rArr; Mlist_Remove &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
</UL>

<P><STRONG><a name="[2cc]"></a>UI_Func_List_Init</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, app_ui.o(i.UI_Func_List_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = UI_Func_List_Init &rArr; UI_FuncListAdd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_FuncListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDataInit
</UL>

<P><STRONG><a name="[a3]"></a>task_50ms_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ui.o(i.task_50ms_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = task_50ms_IRQHandler &rArr; UI_sendEvent &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ui.o(i.UI_Init)
</UL>
<P><STRONG><a name="[1b3]"></a>uiDataInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_ui.o(i.uiDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = uiDataInit &rArr; UI_Func_List_Init &rArr; UI_FuncListAdd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_list_Destroy
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_IsEmpty
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_List_Init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Clear_Init_Flag
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Func_List_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomUI_Update_Thread
</UL>

<P><STRONG><a name="[322]"></a>ui_data_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_drawui.o(i.ui_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_rect_operate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_line_operate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_append_cirle_operate
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ui_init
</UL>

<P><STRONG><a name="[1c7]"></a>getRotationLine</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fun_drawcustomui.o(i.getRotationLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = getRotationLine &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_laneLines_bkgd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armYaw_dyn
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_armPitch_dyn
</UL>

<P><STRONG><a name="[25d]"></a>MX_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_hw_spi.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_HW_SPI_Init
</UL>

<P><STRONG><a name="[25f]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_hw_spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_HW_SPI_Init
</UL>

<P><STRONG><a name="[208]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[394]"></a>get_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[cb]"></a>stm32_pin_attach_irq</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_gpio.o(i.stm32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>stm32_pin_dettach_irq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>stm32_pin_irq_enable</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, drv_gpio.o(i.stm32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stm32_pin_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>stm32_pin_mode</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, drv_gpio.o(i.stm32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stm32_pin_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>stm32_pin_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>stm32_pin_write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[246]"></a>dma_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_usart.o(i.dma_isr))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ce]"></a>stm32_configure</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stm32_configure &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>stm32_control</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = stm32_control &rArr; stm32_dma_config &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[391]"></a>stm32_dma_config</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, drv_usart.o(i.stm32_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = stm32_dma_config &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[d2]"></a>stm32_dma_transmit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = stm32_dma_transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>stm32_getc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>stm32_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[35f]"></a>stm32_uart_get_dma_config</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, drv_usart.o(i.stm32_uart_get_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[2d9]"></a>uart_isr</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, drv_usart.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1]"></a>drv_pwm_control</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_pwm_control &rArr; drv_pwm_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.data)
</UL>
<P><STRONG><a name="[326]"></a>drv_pwm_enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_pwm_enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[328]"></a>drv_pwm_get</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, drv_pwm.o(i.drv_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drv_pwm_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[327]"></a>drv_pwm_set</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, drv_pwm.o(i.drv_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drv_pwm_set &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_GenerateEvent
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[397]"></a>pwm_get_channel</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_pwm.o(i.pwm_get_channel))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[392]"></a>stm32_hw_pwm_init</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, drv_pwm.o(i.stm32_hw_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = stm32_hw_pwm_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[e2]"></a>stm32_pwm_init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, drv_pwm.o(i.stm32_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = stm32_pwm_init &rArr; rt_device_pwm_register &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[35b]"></a>rt_hw_spi_bus_init</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, drv_spi.o(i.rt_hw_spi_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[d3]"></a>spi_configure</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_spi.o(i.spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_configure &rArr; stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>spixfer</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, drv_spi.o(i.spixfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = spixfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[35d]"></a>stm32_get_dma_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_spi.o(i.stm32_get_dma_info))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[38e]"></a>stm32_spi_init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, drv_spi.o(i.stm32_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[2fc]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_can.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
</UL>

<P><STRONG><a name="[d5]"></a>_can_config</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, drv_can.o(i._can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _can_config &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can_baud_index
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>_can_control</STRONG> (Thumb, 1198 bytes, Stack size 32 bytes, drv_can.o(i._can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _can_control &rArr; _can_config &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>_can_recvmsg</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, drv_can.o(i._can_recvmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _can_recvmsg &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>_can_rx_isr</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, drv_can.o(i._can_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxFifoFillLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>_can_sendmsg</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, drv_can.o(i._can_sendmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _can_sendmsg &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>get_can_baud_index</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_can.o(i.get_can_baud_index))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[c7]"></a>wdt_control</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, drv_wdt.o(i.wdt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wdt_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_wdt_init)
</UL>
<P><STRONG><a name="[c6]"></a>wdt_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_wdt.o(i.wdt_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_wdt_init)
</UL>
<P><STRONG><a name="[2fd]"></a>_can_int_rx</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, can.o(i._can_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _can_int_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
</UL>

<P><STRONG><a name="[303]"></a>_can_int_tx</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, can.o(i._can_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _can_int_tx &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[305]"></a>_can_int_tx_priv</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, can.o(i._can_int_tx_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[b7]"></a>cantimeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, can.o(i.cantimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cantimeout &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b3]"></a>rt_can_close</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, can.o(i.rt_can_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_can_close &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b6]"></a>rt_can_control</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, can.o(i.rt_can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_can_control &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b1]"></a>rt_can_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can.o(i.rt_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_can_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b2]"></a>rt_can_open</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, can.o(i.rt_can_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_can_open &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b4]"></a>rt_can_read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, can.o(i.rt_can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_can_read &rArr; _can_int_rx &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b5]"></a>rt_can_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, can.o(i.rt_can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_can_write &rArr; _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.rt_hw_can_register)
</UL>
<P><STRONG><a name="[334]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[302]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[2ff]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[300]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[ad]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[ab]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[ac]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[b0]"></a>_pwm_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_drv_pwm.o(i._pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[ae]"></a>_pwm_read</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[af]"></a>_pwm_write</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[30f]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[310]"></a>_serial_dma_rx</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[314]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[316]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[317]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[318]"></a>_serial_int_tx</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[319]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[31a]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[312]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[313]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[34e]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[ba]"></a>rt_serial_close</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bd]"></a>rt_serial_control</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b8]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b9]"></a>rt_serial_open</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bb]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bc]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[c4]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[c2]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[c3]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[338]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[342]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[345]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[346]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[c0]"></a>rt_watchdog_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_watchdog_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[c1]"></a>rt_watchdog_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, watchdog.o(i.rt_watchdog_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[be]"></a>rt_watchdog_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[bf]"></a>rt_watchdog_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(i.rt_watchdog_open))
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[a9]"></a>serial_thread_entry</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, drv_remote.o(i.serial_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = serial_thread_entry &rArr; rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteDataProcess
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCReadKeyBoard_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_remote.o(i.remote_uart_init)
</UL>
<P><STRONG><a name="[a8]"></a>uart_input</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, drv_remote.o(i.uart_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = uart_input &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_remote.o(i.remote_uart_init)
</UL>
<P><STRONG><a name="[29e]"></a>SPI_CAN_Dev_Init</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, drv_spican.o(i.SPI_CAN_Dev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SPI_CAN_Dev_Init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Init
</UL>

<P><STRONG><a name="[2a0]"></a>SPI_CAN_EndTransmit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, drv_spican.o(i.SPI_CAN_EndTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_CAN_EndTransmit &rArr; SPI_CAN_ReceiveProcess &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_ReceiveProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread
</UL>

<P><STRONG><a name="[2a1]"></a>SPI_CAN_ReceiveProcess</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, drv_spican.o(i.SPI_CAN_ReceiveProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = SPI_CAN_ReceiveProcess &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_EndTransmit
</UL>

<P><STRONG><a name="[2a4]"></a>SPI_CAN_StartTransmit</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, drv_spican.o(i.SPI_CAN_StartTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_CAN_StartTransmit &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Thread
</UL>

<P><STRONG><a name="[8d]"></a>SPI_CAN_Thread</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, drv_spican.o(i.SPI_CAN_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_CAN_Thread &rArr; SPI_CAN_StartTransmit &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_StartTransmit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_EndTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spican.o(i.SPI_CAN_Thread_Init)
</UL>
<P><STRONG><a name="[2a2]"></a>SPI_CAN_Thread_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_spican.o(i.SPI_CAN_Thread_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SPI_CAN_Thread_Init &rArr; rt_thread_create &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CAN_Init
</UL>

<P><STRONG><a name="[8e]"></a>Slave_Reset</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, drv_spican.o(i.Slave_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Slave_Reset &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spican.o(i.SPI_CAN_Thread_Init)
</UL>
<P><STRONG><a name="[1d5]"></a>Find_Swdg_Info</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mod_monitor.o(i.Find_Swdg_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Find_Swdg_Info &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>

<P><STRONG><a name="[2c1]"></a>strnamecpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mod_monitor.o(i.strnamecpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strnamecpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
</UL>

<P><STRONG><a name="[100]"></a>AddErrSwdg</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, app_monitor.o(i.AddErrSwdg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddErrSwdg
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSwdgNum
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Thread_Entry
</UL>

<P><STRONG><a name="[88]"></a>Monitor_Thread_Entry</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, app_monitor.o(i.Monitor_Thread_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Monitor_Thread_Entry &rArr; Swdg_Add_to_Monitor &rArr; Swdg_Create &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swdg_Add_to_Monitor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddErrSwdg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mlist_Insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[87]"></a>Monitor_Timer_Timeout_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_monitor.o(i.Monitor_Timer_Timeout_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Monitor_Timer_Timeout_Handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[267]"></a>appMonitorInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_monitor.o(i.appMonitorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = appMonitorInit &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modMonitorInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSwdgInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
</UL>

<P><STRONG><a name="[a6]"></a>cpu_usage_idle_hook</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, drv_cpuusage.o(i.cpu_usage_idle_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = cpu_usage_idle_hook &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_cpuusage.o(i.cpu_usage_init)
</UL>
<P><STRONG><a name="[273]"></a>Package_CallBack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_dataserve.o(i.Package_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Package_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
</UL>

<P><STRONG><a name="[288]"></a>check_Package_Num_Now</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_dataserve.o(i.check_Package_Num_Now))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Add_Package
</UL>

<P><STRONG><a name="[272]"></a>utils_Low_Pass_Filter_Float</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drv_dataserve.o(i.utils_Low_Pass_Filter_Float))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Write_All_Data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_Pionter_Write_End
</UL>

<P><STRONG><a name="[2b8]"></a>DataLimFix</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, drv_exactsmooth.o(i.DataLimFix))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_FreshOutData
</UL>

<P><STRONG><a name="[2ba]"></a>Fresh_DeltaData</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, drv_exactsmooth.o(i.Fresh_DeltaData))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_SetDataABS
</UL>

<P><STRONG><a name="[2b7]"></a>Smooth_FreshOutData</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, drv_exactsmooth.o(i.Smooth_FreshOutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Smooth_FreshOutData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLimFix
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_GetDataABS
</UL>

<P><STRONG><a name="[2b9]"></a>GetDeSpeed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_accclamp.o(i.GetDeSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Process
</UL>

<P><STRONG><a name="[2b4]"></a>Smooth_Input</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_accclamp.o(i.Smooth_Input))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Process
</UL>

<P><STRONG><a name="[2b6]"></a>Smooth_Output</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_accclamp.o(i.Smooth_Output))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Process
</UL>

<P><STRONG><a name="[2b5]"></a>Smooth_Process</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_accclamp.o(i.Smooth_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Smooth_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smooth_Acc_Process
</UL>

<P><STRONG><a name="[256]"></a>Key_Check</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, func_key_record.o(i.Key_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Key_Check &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetRCState
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Key_Process
</UL>

<P><STRONG><a name="[259]"></a>Key_EVTToNum</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, func_key_record.o(i.Key_EVTToNum))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetPressConfirm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetCallBack
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
</UL>

<P><STRONG><a name="[257]"></a>Key_GetRCState</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, func_key_record.o(i.Key_GetRCState))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Check
</UL>

<P><STRONG><a name="[32d]"></a>motor_angle_adjust</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, drv_motor.o(i.motor_angle_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motor_angle_adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Get_DeltaAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_readmsg
</UL>

<P><STRONG><a name="[20f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[210]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[202]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[204]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[206]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[73]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[71]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[72]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UART_RxHalfCpltCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[74]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[75]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[23d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[240]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[23c]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23f]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[69]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6e]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[6c]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6f]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; HAL_SPI_TxRxCpltCallback &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[21d]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[221]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[2ab]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[22c]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[230]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[232]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[233]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[22b]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[22d]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
